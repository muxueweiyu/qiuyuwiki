<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qiuyu&#39;s Wiki</title>
  
  
  <link href="http://muxueweiyu.github.io/wiki/atom.xml" rel="self"/>
  
  <link href="http://muxueweiyu.github.io/wiki/"/>
  <updated>2021-03-25T01:29:06.327Z</updated>
  <id>http://muxueweiyu.github.io/wiki/</id>
  
  <author>
    <name>Weiyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git tutorial</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/professional/effience/git%20tutorial/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/professional/effience/git%20tutorial/</id>
    <published>2021-03-25T01:17:21.000Z</published>
    <updated>2021-03-25T01:29:06.327Z</updated>
    
    <content type="html"><![CDATA[<p> 提高效率</p><span id="more"></span><h2 id="Working-with-Remotes"><a href="#Working-with-Remotes" class="headerlink" title="Working with Remotes"></a>Working with Remotes</h2><p>Showing Your Remotes</p><pre><code class="git">git remotegit remote -vorigin:https://github.com/schacon/ticgit (fetch)origin:https://github.com/schacon/ticgit (push)git push origin master</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt; 提高效率&lt;/p&gt;</summary>
    
    
    
    <category term="professional" scheme="http://muxueweiyu.github.io/wiki/categories/professional/"/>
    
    <category term="effience" scheme="http://muxueweiyu.github.io/wiki/categories/professional/effience/"/>
    
    
    <category term="efficiency" scheme="http://muxueweiyu.github.io/wiki/tags/efficiency/"/>
    
  </entry>
  
  <entry>
    <title>FQA</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Program/Python/FQA/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Program/Python/FQA/</id>
    <published>2021-03-25T00:06:23.000Z</published>
    <updated>2021-03-25T01:17:02.313Z</updated>
    
    <content type="html"><![CDATA[<p> 列出在使用Pythonh中解决的问题</p><span id="more"></span><h2 id="Python-设立虚拟环境"><a href="#Python-设立虚拟环境" class="headerlink" title="Python 设立虚拟环境"></a>Python <a href="https://docs.python.org/zh-tw/3/tutorial/venv.html">设立虚拟环境</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv tutorial-env</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt; 列出在使用Pythonh中解决的问题&lt;/p&gt;</summary>
    
    
    
    <category term="Program" scheme="http://muxueweiyu.github.io/wiki/categories/Program/"/>
    
    <category term="Python" scheme="http://muxueweiyu.github.io/wiki/categories/Program/Python/"/>
    
    
    <category term="program" scheme="http://muxueweiyu.github.io/wiki/tags/program/"/>
    
    <category term="FQA" scheme="http://muxueweiyu.github.io/wiki/tags/FQA/"/>
    
  </entry>
  
  <entry>
    <title>职业规划</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</id>
    <published>2021-03-24T15:03:28.000Z</published>
    <updated>2021-03-25T00:06:16.995Z</updated>
    
    <content type="html"><![CDATA[<p>知行合一-热爱工作，享受生活。</p><p>对软件开发者这行有浓厚的兴趣，想成为一名出色的软件开发者，想每天充满激情地工作，想要把开发软件视为一项事业而不仅仅是一份工作。有效的方法、经验和态度，要尊重并热爱你的职业。</p><span id="more"></span><p>做到一点，燃烧吧，燃烧你的热情，效率提高</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;知行合一-热爱工作，享受生活。&lt;/p&gt;
&lt;p&gt;对软件开发者这行有浓厚的兴趣，想成为一名出色的软件开发者，想每天充满激情地工作，想要把开发软件视为一项事业而不仅仅是一份工作。有效的方法、经验和态度，要尊重并热爱你的职业。&lt;/p&gt;</summary>
    
    
    
    <category term="Random Thoughts" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/"/>
    
    <category term="话题集" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="想法" scheme="http://muxueweiyu.github.io/wiki/tags/%E6%83%B3%E6%B3%95/"/>
    
    <category term="一切可能" scheme="http://muxueweiyu.github.io/wiki/tags/%E4%B8%80%E5%88%87%E5%8F%AF%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Qwerty Learner推荐及想法</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/Qwerty%20Learner%E6%8E%A8%E8%8D%90%E5%8F%8A%E6%83%B3%E6%B3%95/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/Qwerty%20Learner%E6%8E%A8%E8%8D%90%E5%8F%8A%E6%83%B3%E6%B3%95/</id>
    <published>2021-03-24T09:24:55.000Z</published>
    <updated>2021-03-24T14:27:14.321Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://github.com/Kaiyiwing/qwerty-learner">Qwerty Learner</a>一个非常值得使用的打字项目</p><span id="more"></span><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>一直都找一款可以练习打字的，有很多但都不太满意，在telegram频道看到了推荐的这个项目，在体验了一个小时，使用体验非常赞，我现在的想法是依这个项目为准，搞懂整个原理，增加航空词典，古诗词典。是否可以在网站上实现功能先不考虑，先在本地运行。</p><p>项目安排时间（一周完成）：</p><ul><li><a href="#%E9%98%85%E8%AF%BB%E9%A1%B9%E7%9B%AE%E6%9F%A5%E6%89%BE%E8%B5%84%E6%96%99">阅读项目查找资料</a>第一天</li><li><a href="#%E5%88%86%E6%9E%90%E9%83%A8%E7%BD%B2">分析部署</a>第二天</li><li><a href="#%E8%B0%83%E8%AF%95">调试</a>第三天</li><li><a href="#%E6%B5%8B%E8%AF%95">测试</a>第四天</li><li><a href="#%E6%96%87%E6%A1%A3%E6%8A%A5%E5%91%8A">文档报告</a>第五天</li><li><a href="#%E6%96%87%E6%A1%A3%E6%8A%A5%E5%91%8A">文档报告</a>第六天</li><li><a href="#%E6%96%87%E6%A1%A3%E6%8A%A5%E5%91%8A">文档报告</a>第七天</li></ul><h2 id="阅读项目查找资料"><a href="#阅读项目查找资料" class="headerlink" title="阅读项目查找资料"></a>阅读项目查找资料</h2><p>一个个人项目的启动是需要学习很多参考更多借鉴美的作品，看来很多类似的实现，越能感觉到一个好的项目需要持久的更新，更需要详细的文档，否则无法形成良性循环。</p><p>需要一个美的图标，访问地址</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>软件设计的目标群体以英语作为主要工作语言的键盘工作者。部分人会出现输入母语时的打字速度快于英语的情况，因为多年的母语输入练成了肌肉记忆，而英语输入的肌肉记忆相对较弱，容易出现输入英语时“提笔忘字”的现象。</p><p>同时为了巩固英语技能，也需要持续的背诵单词，本软件将英语单词的记忆与英语键盘输入的肌肉记忆的锻炼相结合，可以在背诵单词的同时巩固肌肉记忆。</p><p>为了避免造成错误的肌肉记忆，设计上如果用户单词输入错误则需要重新输入单词，尽可能确保用户维护正确的肌肉记忆。</p><p>软件也对需要机考英语的人群有一定的帮助。</p><p><strong>For Coder:</strong></p><p>内置了程序员工作常用单词的词库，方便联系工作中常用的单词、提高输入速度。也内置了JS API 的练习，帮助以JS为主要工作语言的程序员练习常用的API，其它语言的API正在添加中…</p><h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><ul><li>词库</li></ul><p>内置常用CET-4、CET-6、GMAT、GRE、IEITS、SAT、TOEFL、考研英语、专业四级英语、专业八级英语。也有程序员常见英语单词以及JS APT等词库。</p><ul><li>音标显示、发音功能</li></ul><p>方便用户在记忆单词时，同时记忆读音与音标。</p><ul><li>默写模式</li></ul><p>完成一个章节练习后，是否默写本章，方便用户巩固本章学习的单词。</p><ul><li>速度、正确率显示</li></ul><p>量化用户输入的速度和输入的正确率，让用户感知了解自己技能的提升</p><h3 id="词库列表"><a href="#词库列表" class="headerlink" title="词库列表"></a>词库列表</h3><ul><li>CET-4</li><li>CET-6</li><li>GMAT</li><li>GRE</li><li>IELTS</li><li>SAT</li><li>TOEFL</li><li>考研英语</li><li>专业四级英语</li><li>专业八级英语</li><li>Coder Dict 程序员常用词</li><li>高考</li><li>中考</li><li>商务英语</li><li>BEC</li><li>人教版英语 3-9 年级</li></ul><h3 id="API词库"><a href="#API词库" class="headerlink" title="API词库"></a>API词库</h3><ul><li>JavaScript API. <a href="https://github.com/sdu-gyf">@sdu-gyf</a></li><li>Node.js API. <a href="https://github.com/chrysalis1215">@chrysalis1215</a></li><li>Java API. <a href="https://github.com/SFAfreshman">@darkSheep</a></li></ul><h3 id="功能与建议"><a href="#功能与建议" class="headerlink" title="功能与建议"></a>功能与建议</h3><p>目前在开发初期</p><h3 id="共享指南"><a href="#共享指南" class="headerlink" title="共享指南"></a>共享指南</h3><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><h3 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h3><ul><li><a href="https://www.keybr.com/">Keybr</a></li></ul><p>算法著称，功能完善的打字网站，根据用户输入正确率与速度生成“伪代码”帮助用户集中锻炼，还能生成分析报告。</p><p>这个项目的核心灵感来源，Keybr更多针对英语为母语的用户，虽然可以练习字母，但不能提升对单词的掌握，本项目出现了。</p><ul><li><a href="https://www.typing.academy/">Typing Academy</a></li></ul><p>一个非常优秀的打字练习网站。<br>优秀的UI风格，对速度、正确率的展示极大的影响本项目的UI设计</p><ul><li><a href="https://github.com/webzhd/react-code-game">react-code-game</a></li></ul><p>一个非常酷的开源项目，使用ts实现，可以在练习打字的同时练习js内置api,项目中添加代码api的想法来源此项目。</p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul><li><a href="https://github.com/facebook/react">React</a>&amp;<a href="https://github.com/facebook/create-react-app">CRA</a></li></ul><p>有完整和详细的文档对初学者非常友好，React系得文档目前自学过程中的最棒的文档，几乎解决使用中的发部分问题。在此感谢React对开源世界的贡献，为我们搭建了很好的基础，让初学者也能构建非常棒的软件。</p><ul><li><a href="https://tailwindcss.com/docs">Tailwindcss</a></li></ul><p>tailwind的设计思路解决了css入门选手对写复杂css的恐惧，让新手以一个非常舒适的方式去设计UI。</p><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>字典数据来自于<a href="https://github.com/kajweb/dict">kajweb</a>,项目爬取了常见的字典，也是这个项目使得这个想法得以实现。</p><p>语音数据来源于<a href="https://www.youdao.com/">有道词典</a>开放API，感谢有道的贡献让小项目可以使用非常专业的发音资源，感谢有道团队以及考神团队为中国教育与中外交流做出的重要贡献。</p><p>JS API来自于<a href="https://github.com/webzhd/react-code-game">react-code-game</a>,感谢项目对JS API的爬取与预处理。</p><h2 id="项目Icon"><a href="#项目Icon" class="headerlink" title="项目Icon"></a>项目Icon</h2><p>感谢<a href="https://github.com/libregd">libregd</a>提供图标设计，贡献多个图标设计方案，同时对项目提供设计、建议、未来规划等。</p><h2 id="感谢支持"><a href="#感谢支持" class="headerlink" title="感谢支持"></a>感谢支持</h2><p>都是大佬啊，有人支持才有动力写下去。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;a href=&quot;https://github.com/Kaiyiwing/qwerty-learner&quot;&gt;Qwerty Learner&lt;/a&gt;一个非常值得使用的打字项目&lt;/p&gt;</summary>
    
    
    
    <category term="Random Thoughts" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/"/>
    
    <category term="话题集" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="想法，实践" scheme="http://muxueweiyu.github.io/wiki/tags/%E6%83%B3%E6%B3%95%EF%BC%8C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>话题</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%AF%9D%E9%A2%98/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/%E8%AF%9D%E9%A2%98/</id>
    <published>2021-03-24T04:07:19.000Z</published>
    <updated>2021-03-24T15:01:32.332Z</updated>
    
    <content type="html"><![CDATA[<p>列出一切可能，不需要过多思考，就是写一遍关于这个观点的文章。每日更新。</p><span id="more"></span><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>刑法</p><p>物权法</p><p>劳动法</p><p>辩论</p><p>航空电子</p><p>无限大可能</p><ul><li><p>Qwerty Learner</p></li><li><p>职业规划之道</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;列出一切可能，不需要过多思考，就是写一遍关于这个观点的文章。每日更新。&lt;/p&gt;</summary>
    
    
    
    <category term="Random Thoughts" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/"/>
    
    <category term="话题集" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/%E8%AF%9D%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="想法" scheme="http://muxueweiyu.github.io/wiki/tags/%E6%83%B3%E6%B3%95/"/>
    
    <category term="一切可能" scheme="http://muxueweiyu.github.io/wiki/tags/%E4%B8%80%E5%88%87%E5%8F%AF%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>工作环境的备份</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/professional/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/professional/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD/</id>
    <published>2021-03-23T13:11:30.000Z</published>
    <updated>2021-03-24T04:07:08.566Z</updated>
    
    <content type="html"><![CDATA[<p> 一切以提高效率为基准</p><span id="more"></span><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><p><a href="#%E7%94%B5%E8%84%91%E5%8A%9E%E5%85%AC%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD">电脑办公软件备份</a></p></li><li><p><a href="#%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90%E9%9B%86%E5%90%88">休闲娱乐集合</a></p></li><li><p><a href="#%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E6%B1%87%E6%80%BB">技术文档汇总</a></p></li><li><p><a href="#%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD%E5%8F%8A%E9%85%8D%E7%BD%AE">环境备份及配置</a></p></li></ul><h2 id="电脑办公软件"><a href="#电脑办公软件" class="headerlink" title="电脑办公软件"></a>电脑办公软件</h2><p>从效率提升的角度来考虑事情。</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li><p><a href="https://www.microsoft.com/zh-cn/edge/business/download">Microsoft edge</a>最新版下载地址</p></li><li><p><a href="https://www.mozilla.org/en-US/firefox/all/#product-desktop-release">Firefox</a></p></li><li><p><a href="https://windowstan.com/software/chrome-msi/">Google Chrome</a></p></li></ul><p>自用的浏览器就是这些了，浏览器内的配置网络之间都可以账号同步，就没必要多说了。</p><p>主要插件及<a href="https://greasyfork.org/zh-CN">脚本</a>及脚本使用</p><ul><li><a href="#https://microsoftedge.microsoft.com/addons/detail/dark-reader/ifoakfbpdcdoeenechcleahebpibofpc?hl=zh-CN">Dark Reader</a></li><li><a href="#https://microsoftedge.microsoft.com/addons/detail/ublock-origin/odfafepnkmbhccpbejgmiehpchacaeak?hl=zh-CN">uBlock Origin</a></li><li><a href="#https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp?hl=zh-CN">沙拉查词</a></li><li><a href="#https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey</a></li></ul><h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><ul><li><a href="#https://getquicker.net/">Quicker</a></li><li><a href="#https://www.voidtools.com/zh-cn/">Everything</a></li><li><a href="#https://netspeedmonitor.net/">netspeedmonitor</a></li><li><a href="#https://sourceforge.net/projects/ditto-cp/">ditto</a></li><li><a href="#http://www.kbtool.cn/down.php">kaying_tools</a></li><li><a href="#https://calibre-ebook.com/download_windows">calibre</a></li><li><a href="#https://www.chuyu.me/zh-Hans/">DISM++</a></li><li><a href="#https://www.ccleaner.com/ccleaner/download/standard">CCleaner</a></li><li><a href="#https://www.7-zip.org/download.html">7-zip</a></li><li><a href="#https://www.sumatrapdfreader.org/download-free-pdf-viewer.html">sumatrapdf</a></li><li><a href="#https://www.teamviewer.com/en-us/download/windows/">teamviewer</a></li><li><a href="#https://pan.baidu.com/download">百度云盘</a></li><li><a href="#https://mpv.io/installation/">mpv</a></li><li><a href="#https://www.internetdownloadmanager.com/download.html">IDM</a></li><li><a href="#https://www.huorong.cn/person5.html">火绒</a></li><li><a href="http://potplayer.daum.net/">Potplayer</a></li></ul><h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><ul><li><a href="#https://www.microsoftstore.com.cn/software/office">office</a></li><li><a href="#https://pc.weixin.qq.com/?t=win_weixin&platform=wx&lang=zh_TW">微信</a></li><li><a href="#https://tim.qq.com/download.html">tim</a></li><li><a href="#https://www.dingtalk.com/download">钉钉</a></li><li><a href="#www.jianguoyun.com">坚果云</a></li></ul><h3 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h3><ul><li><a href="#https://code.visualstudio.com/download">VS code</a></li><li><a href="#https://visualstudio.microsoft.com/zh-hans/vs/">VS 2019</a></li><li><a href="#https://developer.android.com/studio?hl=id">Andriod Studio</a></li><li><a href="#https://unity3d.com/cn/get-unity/download">Unity3D</a></li><li><a href="#https://www.eclipse.org/downloads/">eclipse</a></li><li><a href="#https://typora.io/#windows">Typora</a></li><li><a href="#https://www.mongodb.com/try/download/community">Mongo</a></li><li><a href="#https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6?activetab=pivot:overviewtab">WSL-Ubuntu</a></li><li><a href="#https://git-scm.com/download/win">git</a></li><li><a href="#http://mingw-w64.org/doku.php/download/win-builds">mingw-w64</a></li><li><a href="#https://www.python.org/downloads/">Python</a></li><li><a href="#https://nodejs.org/en/">nodejs</a></li><li><a href="#https://zhs.moo0.com/">Moo0</a></li></ul><p>国内使用</p><h3 id="镜像站"><a href="#镜像站" class="headerlink" title="镜像站"></a>镜像站</h3><ul><li><a href="https://mirrors.huaweicloud.com/">华为开源镜像站</a></li><li><a href="https://developer.aliyun.com/special/mirrors/notice">阿里巴巴开源镜像站</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></li><li><a href="http://mirrors.163.com/">网易开源镜像站</a></li><li><a href="http://mirrors.ustc.edu.cn/">中国科学技术大学开源镜像站</a></li><li><a href="http://mirrors.zju.edu.cn/">浙江大学开源镜像站</a></li></ul><h2 id="休闲娱乐集合"><a href="#休闲娱乐集合" class="headerlink" title="休闲娱乐集合"></a>休闲娱乐集合</h2><ul><li><a href="#https://www.bilibili.com/">bilibili</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt; 一切以提高效率为基准&lt;/p&gt;</summary>
    
    
    
    <category term="professional" scheme="http://muxueweiyu.github.io/wiki/categories/professional/"/>
    
    
    <category term="Efficiency" scheme="http://muxueweiyu.github.io/wiki/tags/Efficiency/"/>
    
    <category term="Summary" scheme="http://muxueweiyu.github.io/wiki/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>TDD</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/professional/design-document/TDD/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/professional/design-document/TDD/</id>
    <published>2021-03-21T11:04:10.000Z</published>
    <updated>2021-03-21T16:00:37.678Z</updated>
    
    <content type="html"><![CDATA[<ul><li>学习<a href="http://www.agiledata.org/essays/tdd.html">Introduction to Test Driven Development (TDD)</a>文档结构。</li><li>学习文档结构<a href="https://www.vogella.com/tutorials/JUnit/article.html">Unit Testing with JUnit 5 - Tutorial</a></li><li><a href="http://www.agilemodeling.com/essays/agileDocumentation.htm">Agile/Lean Documentation: Strategies for Agile Software Development</a></li></ul><span id="more"></span><h4 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h4><ul><li><a href="#What-is-TDD%EF%BC%9F">What is TDD?</a></li><li><a href="#TDD-and-traditional-testing">TDD and traditional testing</a></li><li><a href="#TDD-and-documentation">TDD and documentation</a></li><li><a href="#Test-driven-database-development">Test-driven database development</a></li><li><a href="#Scalling-TDD-via-Agile-Model-Driven-Development-(AMDD)">Scaling TDD via Agile Model-Driven Development (AMDD)</a></li><li><a href="#Why-TDD?">Why TDD?</a></li><li><a href="#Myths-and-misconeptions">Myths and misconceptions</a></li><li><a href="#Who-is-actually-doing-this?">Who is actually doing this?</a></li><li><a href="#Summary">Summary</a></li><li><a href="#Tools">Tools</a></li></ul><h2 id="What-is-TDD"><a href="#What-is-TDD" class="headerlink" title="What is TDD?"></a>What is TDD?</h2>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;学习&lt;a href=&quot;http://www.agiledata.org/essays/tdd.html&quot;&gt;Introduction to Test Driven Development (TDD)&lt;/a&gt;文档结构。&lt;/li&gt;
&lt;li&gt;学习文档结构&lt;a href=&quot;https://www.vogella.com/tutorials/JUnit/article.html&quot;&gt;Unit Testing with JUnit 5 - Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.agilemodeling.com/essays/agileDocumentation.htm&quot;&gt;Agile/Lean Documentation: Strategies for Agile Software Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="professional" scheme="http://muxueweiyu.github.io/wiki/categories/professional/"/>
    
    <category term="design-document" scheme="http://muxueweiyu.github.io/wiki/categories/professional/design-document/"/>
    
    
    <category term="writing" scheme="http://muxueweiyu.github.io/wiki/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>Java实战01</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Program/Java/Java/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Program/Java/Java/</id>
    <published>2021-03-18T13:14:49.000Z</published>
    <updated>2021-03-21T16:00:05.674Z</updated>
    
    <content type="html"><![CDATA[<p>程序设计由编程语言来表现，Java可能会是借此所找到的第一份工作</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序设计由编程语言来表现，Java可能会是借此所找到的第一份工作&lt;/p&gt;</summary>
    
    
    
    <category term="Program" scheme="http://muxueweiyu.github.io/wiki/categories/Program/"/>
    
    <category term="Java" scheme="http://muxueweiyu.github.io/wiki/categories/Program/Java/"/>
    
    
    <category term="program" scheme="http://muxueweiyu.github.io/wiki/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>Random-Thoughts</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/2021/2021-3/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Random%20Thoughts/2021/2021-3/</id>
    <published>2021-03-01T03:48:15.000Z</published>
    <updated>2021-03-25T01:30:19.268Z</updated>
    
    <content type="html"><![CDATA[<p>计划长期记录，在这个拥有可以充分个人想法技术的时期，不做点什么，真是太说不过去了。</p><span id="more"></span><h2 id="头有点大呀……"><a href="#头有点大呀……" class="headerlink" title="头有点大呀……"></a>头有点大呀……</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-03-01</span><br></pre></td></tr></table></figure><p>可以在家再多呆一周，即有点高兴，也意味着最后一个学期，将步入hard模式。各个方面的压力随之而来。需要做的事情也非常之多，共勉之。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-03-21</span><br></pre></td></tr></table></figure><ul><li>Google cloud platform学习文档</li><li>尝试编写技术文档</li></ul><p>Java学习，基本上就是测试，Google GitHub 等等。<a href="http://underpop.online.fr/j/java/help/test-driving-a-java-application-introduction-to-computers-the-internet-and-the-world-wide-web.html.gz">Test-Driving a Java Application</a>大概了解了一些，然后就是<a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-driven development</a>中看到</p><ul><li><a href="http://www.agiledata.org/essays/tdd.html">Introduction to Test Driven Development (TDD)</a></li></ul><p>啊自由的畅游在软件代码的世界，真的很美好。这是最好时代，这是最坏的时代，愿每一个人都能找到自己所热爱的事情。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-03-22</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.jianshu.com/p/57f7dad37a21">Github仓库master分支到main分支迁移指南</a></li><li><a href="https://www.jianshu.com/p/8814ce1da7a4">使用git分支保存hexo博客源码到github</a></li></ul><h2 id="心情复杂"><a href="#心情复杂" class="headerlink" title="心情复杂"></a>心情复杂</h2><p>今天我的个人网站(博客)上线了，那一刻真的是非常激动，快乐呀！明天要面试了，预祝成功，English在网络中的用处越来越重要了，接下啦就是继续来编写文档了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-03-23</span><br></pre></td></tr></table></figure><p><a href="https://www.lance.moe/post-344.html">WSL2 和 VMWare 不兼容的解决方案</a>虚拟机的使用</p><p><a href="https://itojisan.xyz/trouble/20480/">重大なエラー「Kernel-Power 41」の原因と対処法 – Windows10</a></p><h2 id="规划之道"><a href="#规划之道" class="headerlink" title="规划之道"></a>规划之道</h2><p>确实大开眼界，技术绝对不是全部内容，更重要的是我们需要动力，燃烧不停的动力，我们从不挑战自己，记录下我想要学习的技巧。大佬就是做自己喜欢的事情并长期做下去了。分析恐慌最终消失。</p><p>做出成功的原创，失败和抄写可能是最佳途径。</p><p>不管是什么目的，隐藏你的能力都是非常愚蠢的事情，如果一个人完成了一件非常漂亮的工作，却没有人知道，那在这个经理的眼中，这事情就等同于从未发生过。这听起来有些残酷，但从公司的角度来看，这是有道理的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-03-24</span><br></pre></td></tr></table></figure><p>人们会通过你的写作能力对你做出初步评价，也可以依次深刻理解你的思维活动。如果你无法用自己的母语清楚地表达出自己的想法，让别人明白，又怎么可能用编程语言来清楚的表达出来呢？组织观点，带领读者思考并最终做出合乎逻辑的推断这种能力与创作出清晰的设计和系统实施，并让功能维护者理解的能力是一样的。</p><p>写作能力不仅仅是判断的依据。如果你的团队成员和你处在不同的时区内，那么写作可能就是你汇报工作进度的唯一方法，比如你是如何设计某种东西或者你的团队成员需要做的工作是什么。</p><p>需要沟通，特别是以文字方式进行沟通，是你所有绝妙的想法必须要通过的瓶颈。你自己就是你要解释的内容。</p><p>开发日记，记录做了什么工作，解释设计决定，检查棘手的技术和专业决策。我是自己写作的唯一读者，写作质量要好一点。可以清楚地表达想法。回头阅读之前的日记，评论。通过之前的喜好，来调整你的新纪录。这样做，不仅可以提高你的写作能力，还可以加强你对说做决定的理解，当需要知道如何或者为什么之前要做某事的时候，就可以在日记里找到答案了。</p><p>还有一点挺重要，学习打字，在习惯了输入技巧之后，在写作的时候就会更舒服和自然了。如果打字速度快，在写作的时候也会节省很多时间。</p><p>知行合一，热爱工作，享受生活</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-03-25</span><br></pre></td></tr></table></figure><ul><li>练习使用git</li><li>C++练习</li><li>Qwerty-Learner 一小时</li><li>整理记录</li><li>Unity3D练手</li><li>练习文档格式</li></ul><p>python 虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv tutorial-env</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;计划长期记录，在这个拥有可以充分个人想法技术的时期，不做点什么，真是太说不过去了。&lt;/p&gt;</summary>
    
    
    
    <category term="Random Thoughts" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/"/>
    
    <category term="2021" scheme="http://muxueweiyu.github.io/wiki/categories/Random-Thoughts/2021/"/>
    
    
    <category term="Essay" scheme="http://muxueweiyu.github.io/wiki/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>X86 电脑硬件架构</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Computer/structure-of-computer/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Computer/structure-of-computer/</id>
    <published>2019-08-29T07:06:48.000Z</published>
    <updated>2019-10-28T09:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Classical-model"><a href="#Classical-model" class="headerlink" title="Classical model"></a>Classical model</h2><p><img src="structure-of-computer/PC.%E6%9E%B6%E6%9E%84%E5%9B%BE%E7%A4%BA.png" alt="PC 架构图示"></p><p>此图为比较经典的电脑架构图。实际架构根据不同的厂商，主板，平台有所差别。</p><p>北桥（North Bridge）：北桥芯片位于 CPU 插座边，起连接作用，用来处理高速信号，例如中央处理器、存储器、显卡（PCI Express 接口或AGP接口），还有与南桥之间的通信。目前已被集成到 CPU 。</p><p>南桥（South Bridge）：南桥芯片用于处理低速信号，通过<a href="https://zh.wikipedia.org/wiki/%E5%8C%97%E6%A1%A5">北桥</a>与<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8">中央处理器</a>联系。在 旧 Intel 平台中由 ICH 担当。当前 Intel 的 PCH 可看作是南桥。部分 SoC 将 PCH 也集成到 CPU。</p><p>SIO （Super I/O）: 一种 I/O 芯片，通过 LPC 总线连接到南桥。集成了 PS/2 键盘、PS/2 鼠标、串口 COM、并口 LPT 接口等处理功能。</p><p>SATA（Serial Advanced Technology Attachment）：是一种基于行业标准的串行硬件驱动器接口，是由Intel、IBM、Dell、APT、Maxtor 和 Seagate 公司共同提出的硬盘接口规范。</p><p>SPI (Serial Peripheral Interface): 一种高速，全双工，同步通信总线，在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，正是出于这种简单易用的特性，如今越来越多的芯片集成了这种通信协议，比如AT91RM9200。<br>以主从方式工作，通常有一个主设备和一个或多个从设备，需至少4根线，（3根也可，用于单向传输时，也就是半双工方式），它们是 SDI（数据输入）、SDO（数据输出）、SCLK（时钟）、CS（片选）。</p><p>BIOS (Basic input output system) : 是一组固化到主板 ROM 芯片的程序，可从 CMOS 中读写系统设置的具体信息，负责提供最底层，最直接的硬件设置和控制功能。</p><h3 id="PCH"><a href="#PCH" class="headerlink" title="PCH"></a>PCH</h3><p> <img src="structure-of-computer/Intel.Z390.Chipset.BLOCK.DIAGRAM.png" alt="Intel Z390 Chipset BLOCK DIAGRAM"></p><p>PCH 全称为 Platform Controller Hub，是 Intel 产品的集成南桥。</p><p>北桥的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于北桥芯片集成到 CPU 内，主板上只剩下南桥。所以PCH可以理解成南桥。目前 Intel 的有些 SOC 连 PCH 也集成到CPU内，比如：Intel Xeon D系列.</p><p>PCH 具有原来 ICH （I/O controller hub） 的全部功能，也具有 MCH (Memory control hub) 的管理引擎功能。</p><ul><li>ICH 负责连接PCI总线、IDE设备、I/O设备等，是 INTEL 的南桥芯片系列名称。</li><li>MCH 相当于北桥芯片，负责连接CPU、AGP总线和 Memory.</li></ul><p>DMI (直接媒体接口): 用于连接 CPU 和 PCH 的总线，DMI 2.0 单通道单向传输速率 5GT/s，x4 link 2 GB/s；DMI 3.0 单通道单向传输速率 8GT/s， x4 link 3.93 GB/s。</p><p>SMBus (System Management Bus): PCH提供 SMBus 主机控制器以及 SMBus 接口，主机控制器为处理器提供机制以启动与 SMBus 外围设备的通信。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/vito_bin/article/details/52748429">X86 架构</a></li><li><a href="http://blog.sina.com.cn/s/blog_b44234b70102y1da.html">PCH简单介绍</a></li><li><a href="https://wenku.baidu.com/view/f8859804f4335a8102d276a20029bd64793e625d.html">计算机基础知识-X86架构</a></li><li><a href="http://m.elecfans.com/article/678193.html">一文看懂arm架构和x86架构有什么区别</a></li><li><a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface">Serial_Peripheral_Interface</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Classical-model&quot;&gt;&lt;a href=&quot;#Classical-model&quot; class=&quot;headerlink&quot; title=&quot;Classical model&quot;&gt;&lt;/a&gt;Classical model&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tang</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Tang%20and%20Song/Tang/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Tang%20and%20Song/Tang/</id>
    <published>2019-08-18T05:32:07.000Z</published>
    <updated>2021-03-22T07:33:43.335Z</updated>
    
    <content type="html"><![CDATA[<p>文化之瑰宝，不可弃之于神坛之上，当用心寻之。</p><span id="more"></span><h2 id="将进酒"><a href="#将进酒" class="headerlink" title="将进酒"></a><a href="https://so.gushiwen.org/shiwenv_ee16df5673bc.aspx"><strong>将进酒</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%94%90%E4%BB%A3">唐代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E6%9D%8E%E7%99%BD">李白</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">君不见黄河之水天上来，奔流到海不复回。</span><br><span class="line">君不见高堂明镜悲白发，朝如青丝暮成雪。</span><br><span class="line">人生得意须尽欢，莫使金樽空对月。</span><br><span class="line">天生我材必有用，千金散尽还复来。</span><br><span class="line">烹羊宰牛且为乐，会须一饮三百杯。</span><br><span class="line">岑夫子，丹丘生，将进酒，杯莫停。</span><br><span class="line">与君歌一曲，请君为我倾耳听。(倾耳听 一作：侧耳听)</span><br><span class="line">钟鼓馔玉不足贵，但愿长醉不愿醒。(不足贵 一作：何足贵；不愿醒 一作：不复醒)</span><br><span class="line">古来圣贤皆寂寞，惟有饮者留其名。(古来 一作：自古；惟 通：唯)</span><br><span class="line">陈王昔时宴平乐，斗酒十千恣欢谑。</span><br><span class="line">主人何为言少钱，径须沽取对君酌。</span><br><span class="line">五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</span><br></pre></td></tr></table></figure><h2 id="三五七言-秋风词"><a href="#三五七言-秋风词" class="headerlink" title="三五七言/秋风词"></a><a href="https://so.gushiwen.org/shiwenv_169ff9fbafcb.aspx"><strong>三五七言/秋风词</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%94%90%E4%BB%A3">唐代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E6%9D%8E%E7%99%BD">李白</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">秋风清，秋月明，</span><br><span class="line">落叶聚还散，寒鸦栖复惊。</span><br><span class="line">相思相见知何日？此时此夜难为情！</span><br><span class="line">入我相思门，知我相思苦，</span><br><span class="line">长相思兮长相忆，短相思兮无穷极，</span><br><span class="line">早知如此绊人心，何如当初莫相识。</span><br></pre></td></tr></table></figure><h2 id="月下独酌·其二"><a href="#月下独酌·其二" class="headerlink" title="月下独酌·其二"></a><a href="https://so.gushiwen.org/shiwenv_a1361461c793.aspx"><strong>月下独酌·其二</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%94%90%E4%BB%A3">唐代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E6%9D%8E%E7%99%BD">李白</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">天若不爱酒，酒星不在天。</span><br><span class="line">地若不爱酒，地应无酒泉。</span><br><span class="line">天地既爱酒，爱酒不愧天。</span><br><span class="line">已闻清比圣，复道浊如贤。</span><br><span class="line">贤圣既已饮，何必求神仙。</span><br><span class="line">三杯通大道，一斗合自然。</span><br><span class="line">但得酒中趣，勿为醒者传。</span><br><span class="line"></span><br><span class="line">且乐生前一杯酒，何须身后千载名？</span><br><span class="line"></span><br><span class="line">吾观自古贤达人，功成不退皆殒身。</span><br><span class="line">子胥既弃吴江上，屈原终投湘水滨。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;文化之瑰宝，不可弃之于神坛之上，当用心寻之。&lt;/p&gt;</summary>
    
    
    
    <category term="Tang and Song" scheme="http://muxueweiyu.github.io/wiki/categories/Tang-and-Song/"/>
    
    
    <category term="Classical" scheme="http://muxueweiyu.github.io/wiki/tags/Classical/"/>
    
    <category term="culture" scheme="http://muxueweiyu.github.io/wiki/tags/culture/"/>
    
    <category term="Poetry" scheme="http://muxueweiyu.github.io/wiki/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>Song</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/Tang%20and%20Song/Song/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/Tang%20and%20Song/Song/</id>
    <published>2019-07-18T05:31:53.000Z</published>
    <updated>2021-03-22T07:40:51.443Z</updated>
    
    <content type="html"><![CDATA[<p>复杂感叹的时代，有太多的遗憾。</p><span id="more"></span><h2 id="江城子·乙卯正月二十日夜记梦"><a href="#江城子·乙卯正月二十日夜记梦" class="headerlink" title="江城子·乙卯正月二十日夜记梦"></a><a href="https://so.gushiwen.org/shiwenv_567fcf6ffefb.aspx"><strong>江城子·乙卯正月二十日夜记梦</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">宋代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E8%8B%8F%E8%BD%BC">苏轼</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。</span><br><span class="line">夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。(肠断 一作：断肠)</span><br></pre></td></tr></table></figure><h2 id="念奴娇·中秋"><a href="#念奴娇·中秋" class="headerlink" title="念奴娇·中秋"></a><a href="https://so.gushiwen.org/shiwenv_f0640b25bfea.aspx"><strong>念奴娇·中秋</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">宋代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E8%8B%8F%E8%BD%BC">苏轼</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">凭高眺远，见长空万里，云无留迹。桂魄飞来，光射处，冷浸一天秋碧。玉宇琼楼，乘鸾来去，人在清凉国。江山如画，望中烟树历历。</span><br><span class="line">我醉拍手狂歌，举杯邀月，对影成三客。起舞徘徊风露下，今夕不知何夕？便欲乘风，翻然归去，何用骑鹏翼。水晶宫里，一声吹断横笛。</span><br></pre></td></tr></table></figure><h2 id="於潜僧绿筠轩"><a href="#於潜僧绿筠轩" class="headerlink" title="於潜僧绿筠轩"></a><a href="https://so.gushiwen.org/shiwenv_62b5d8ce8eb3.aspx"><strong>於潜僧绿筠轩</strong></a></h2><p><a href="https://so.gushiwen.org/shiwen/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">宋代</a>：<a href="https://so.gushiwen.org/search.aspx?value=%E8%8B%8F%E8%BD%BC">苏轼</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">宁可食无肉，不可居无竹。</span><br><span class="line">无肉令人瘦，无竹令人俗。</span><br><span class="line">人瘦尚可肥，士俗不可医。</span><br><span class="line">旁人笑此言，似高还似痴。</span><br><span class="line">若对此君仍大嚼，世间那有扬州鹤？</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;复杂感叹的时代，有太多的遗憾。&lt;/p&gt;</summary>
    
    
    
    <category term="Tang and Song" scheme="http://muxueweiyu.github.io/wiki/categories/Tang-and-Song/"/>
    
    
    <category term="Classical" scheme="http://muxueweiyu.github.io/wiki/tags/Classical/"/>
    
    <category term="culture" scheme="http://muxueweiyu.github.io/wiki/tags/culture/"/>
    
    <category term="Poetry" scheme="http://muxueweiyu.github.io/wiki/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>design-document</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/professional/design-document/design-document/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/professional/design-document/design-document/</id>
    <published>2019-03-15T14:03:20.000Z</published>
    <updated>2021-03-21T06:50:55.559Z</updated>
    
    <content type="html"><![CDATA[<p>或许在某一刻才真正发觉到，一个合格的技术员，代码只占其中一部分，技术文档的编写和代码真的是相同重要的。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;或许在某一刻才真正发觉到，一个合格的技术员，代码只占其中一部分，技术文档的编写和代码真的是相同重要的。&lt;/p&gt;</summary>
    
    
    
    <category term="professional" scheme="http://muxueweiyu.github.io/wiki/categories/professional/"/>
    
    <category term="design-document" scheme="http://muxueweiyu.github.io/wiki/categories/professional/design-document/"/>
    
    
    <category term="writing" scheme="http://muxueweiyu.github.io/wiki/tags/writing/"/>
    
    <category term="skill" scheme="http://muxueweiyu.github.io/wiki/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>vczh</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/vczh/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/vczh/</id>
    <published>2019-02-18T05:21:52.000Z</published>
    <updated>2021-03-21T06:48:20.571Z</updated>
    
    <content type="html"><![CDATA[<p>带逛，不需要刻意为之，听其言，观其行做到即可。</p><span id="more"></span><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>直觉一半来自于举一反三，举一反三一半来自于那个一，而当你对很多问题都有那个一的时候显然是因为你这些问题都碰过，碰过问题跟只学会知识还不一样，你还要解决他们。那如何才能碰过并解决大量的问题呢？唯一的方法就是熬过那一大段时间，通常是十几二十年。你光是聪明，可以学会很多东西，但是由于实践的时间不够，仍然不足已成为一个牛逼的程序员。<strong>所以牛逼本身不是一个可以速成的东西，它是知识和经验的积累，然后是运用你的知识和经验的熟练程度。</strong></p><p>整天搞windows，遇到需要用linux的时候也只是问问人看看说明书（不过linux好像没有说明书）的事情了。因为本质困难的东西你都会了，剩下的这些操作问题，只是熟练不熟练的区别而已。</p><p>游戏做完了不能满足于做完，就要开始想模块化的问题了。怎么做一个游戏用的GUI库？怎么做一个游戏用的脚本引擎？怎么给他们制作工具？怎么写一个游戏引擎？怎么写一个RPG Maker？每一个问题想做简单也可以做简单，想做复杂也可以做的很复杂。于是当我问题一个一个的解决之后，都已经来了M$RA了，这也是我为什么后来会做<a href="https://link.zhihu.com/?target=http://www.gaclib.net">GacUI</a> 和各种奇怪的编译器研究各种奇怪的类型系统的原因了。当然现在做到这地步都不是仅仅为了游戏而做，当时当你做出一个游戏可以用得东西之后，你就要开始想怎么把它做成通用的，使得开发软件也可以用。<strong>每一个问题都最终上升了一个台阶，而你觉得容易的问题就不要浪费时间去解决了</strong>。</p><p>你需要花时间做什么，取决于这个问题是不是够难，是不是刚刚好你可以做出来，再难一点点你就做不出来了</p><p>从一个解决问题的程序员，变成一个研究编程本身的程序员了。</p><ul><li>学习编程语言，尽量挑选C++等很有用、不好学、不时髦的语言，避免自己分心，有利于克服人类的劣根性。</li><li>算法数据结构设计模式编译原理，都有经典书籍。</li><li>勤奋的练习。命令行刷几道题练练手感就好了，接下来就是从贪吃蛇和记事本开始抄，你可以一路抄到很远，譬如做一个vscode。</li></ul><p>自己做vscode的时候有一个要点，除了windows api以外不要使用任何其他东西，需要什么全都自己来，这才是练习。你的目标不是开发一个有用的编辑器，你的目标也不是学习对马上工作有用的技能，你的目标是练习编程。要是真的好用，你可以自己用。</p><p>学习编程，就要从磨螺母到锤车床到风洞实验室到光速发动机都自己一路做过来，掌握的技能才扎实，你可以从22岁做到92岁，不管即使发生什么变化，都可以从容应对，轻松跟上世界的发展。只会用别人的工具而不会自己造工具的，只会疲于奔命，在35岁的时候还是只能干应届生的活，因为体力不支惨遭淘汰。</p><p>变量名用英文的话，写代码的时候就不要用中文思考。你可以每天下班在家4小时，写自己的开源项目，文档全用英文，锻炼自己的语言能力。</p><p>另外，设计模式也是一套词汇表，建议先掌握。这样写出来的代码，同样是懂设计模式的人来看，理解起来轻松很多。</p><ul><li>one man army</li><li>There’s only one way to learn to program: writing a lot of code.</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;带逛，不需要刻意为之，听其言，观其行做到即可。&lt;/p&gt;</summary>
    
    
    
    <category term="People that affect me" scheme="http://muxueweiyu.github.io/wiki/categories/People-that-affect-me/"/>
    
    
    <category term="affect" scheme="http://muxueweiyu.github.io/wiki/tags/affect/"/>
    
    <category term="people" scheme="http://muxueweiyu.github.io/wiki/tags/people/"/>
    
  </entry>
  
  <entry>
    <title>g9</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/g9/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/g9/</id>
    <published>2019-01-21T06:44:07.000Z</published>
    <updated>2021-03-21T09:04:13.246Z</updated>
    
    <content type="html"><![CDATA[<p>内容相当丰富，这或许是最想要成为的模样。</p><span id="more"></span><h2 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h2><p>上学最宝贵的收获之一是结交学识过人的朋友。自己闷头学得山穷水尽时，高手轻轻一句点拨，眼前便峰回路转，柳暗花明。每次上完课，有幸和朋友小聚，请教弱智问题，听朋友妙语解惑，实在是难得的人生乐事。读The Little Schemer，也有同样的感受。读The Little Schemer的过程，就是被良师引导的过程。</p><p>作者的话说，The Little Schemer是一本教人理解计算本质的书。编程语言Scheme不过是传道的载体。书的体例独特。每页分成两列。每列寥寥几行代码，数段散句。左边一列问个问题。右边一列给出答案。作者就用这种轻松对话的形式讲解递归和函数编程。</p><p>序言的话说，The Little Schemer展示了列表是Lisp编程的心脏，而The Seasoned Schemer展示了函数是Lisp编程的灵魂。</p><p>Knuth在《Mathematical Writing》里强调的“为普通人而写，你的作品专家能看懂；为专家而写，你的书没人看懂”的箴言还不够深入人心。</p><h2 id="做题的境界"><a href="#做题的境界" class="headerlink" title="做题的境界"></a>做题的境界</h2><p>把习题当成项目来做。十年寒窗。半世煎熬。习题做完，世界随之改变。例子：<a href="http://www.cis.upenn.edu/~wilf/AeqB.html">A = B</a>这本200来页的书（免费下载。作者是好心银啊），解决了《<a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html">编程的艺术</a>》上一道难度系数为50的习题：自动化多维几何级数的求和。如果有封闭解，则自动找到该解。不然自动证明无解。这好比20年前Wolfman的Mathematica搞定自动积分，号称机器不能积的，人肉也不用想。又好比优化编译器生成人肉编译器们望尘莫及的全局优化代码。众多老大多年积累引为自豪的技巧转眼成为自娱自乐的玩具，价值可比1949年太祖登位前的法币。技巧贬值事小，附着于技巧上的汗水，骄傲，地位，以及掌控未来的安全感也烟消云散恐怕更有杀伤力。所以愤怒和抵制情绪就象巴普洛夫狗的唾液一样自然分泌。一将功成万骨枯。世界就这么残酷。工业革命萌芽时疯狂打砸自动纺织机器的英国纺织工人们想必早有体会。历史上喜剧也总在重演。我们至少已经看过机器语言高手们对汇编的鄙视，汇编语言高手们对C的不屑，C语言高手们对使用垃圾收集器的愤怒。靠，又扯远了。还是说回这本书。</p><p>关于科学和艺术的铿锵引言就是从这里来的：Science is what we understand well enough to explain to a computer. Art is everything else we do…. Science advances whenever an Art becomes a Science. And the state of the Art advances too, because people always leap into new territory once they have understood more about the old.</p><p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/66356358d9054b4fb5f5416e51ac7525.png" alt="img"></p><p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/0878a9a309df4071b58ad97828ec9b79.png" alt="img"></p><h2 id="一本书和阅读代码"><a href="#一本书和阅读代码" class="headerlink" title="一本书和阅读代码"></a>一本书和阅读代码</h2><p>很难想象钢琴家不用聆听大师的作品；诗人不用揣摩传世的经典；画家不用体会前辈的佳作；拳手不用参详高人的示范。那我们怎么能想象程序员不用仔细学习性感的代码？</p><p>IBM的<a href="http://en.wikipedia.org/wiki/Grady_Booch">Grady Booch</a>也强力推荐程序员大量阅读代码，认为这是从新手到高手的必要手段。如果喜欢软件开发老大还没有订阅<a href="http://www.booch.com/architecture/blog.jsp">Grady Booch的博客</a>的话，现在是时候了。G老大的私人项目<a href="http://www.booch.com/architecture/handbook.jsp">Architecture Handbook</a>想必更是每位对软件架构有兴趣的老大的必读材料吧？他在这本公开的手册将归类整理历史上各式架构。虽然这些工作开始还不到四年，但上面已经有不少高质量的资料。比如以前提到过的[Eclipse架构考古](<a href="http://www.booch.com/architecture/blog/artifacts/Software">http://www.booch.com/architecture/blog/artifacts/Software</a> Archeology.ppt)。也许用G老大自己的话最能雄辩地道出软件考古的意义：经典科学通过在定量观察和理论构建间曼舞取得进展。前者细致而刻意，后者富于创新且能经受检验。计算机科学充满了经验的观察和理论的构造，但软件世界里，我们往往把所有时间用于搭建实物，却疏于科学研究。我们有自己关于流程和工具的理论，但它们大部分都基于坊间传闻和个人经验，而不是基于反映了可靠经验研究的确凿且中立的数据（classical science advances via the dance between quantitative observation and theoretical construction.” The former is deliberate and intentional; the latter is creative and testable. Computer science is full of empirical observation and the construction of theories, but in the world of software we often spend all of time building artifacts and not enough time doing science. We have our share of theories, about process and tools, but much of that work is based on anecdote and personal experience, not the hard, dispassionate data that reflects good empirical work）</p><p>计算机系不仅要交给学生知识，也要让学生领会“激情，美丽，快乐，和敬畏”，真是深得我心啊。在演讲里，G老大频繁用“正确和高尚”来描述计算机业界众人的努力，说从事软硬件研发的工作既是特权也是义务。它是特权，因为我们从根本上多方面深刻地改变这个世界。基于同样的原因，这也是我们的义务。我们应当牢记这点，并让我们的学生同样明白。不知道G老大和蜘蛛人有什么瓜葛。</p><h2 id="计算机科学经典论文"><a href="#计算机科学经典论文" class="headerlink" title="计算机科学经典论文"></a>计算机科学经典论文</h2><p>Jao的<a href="http://jaortega.wordpress.com/">Programming Musing</a> 看到的：Babar Kazar 整理了<a href="http://www.zafar.se/bkz/Articles/ClassicCompScienceTexts">一堆经典论文</a>。Jao强烈建议每个严肃的程序员读每篇论文，说它们都或多或少有意思。粗粗扫了一下，很多论文都没读过。挑了些俺多少知道一点的介绍。</p><ul><li>[An axiomatic basis for computer programming](<a href="http://www.spatial.maine.edu/~worboys/processes/hoare">http://www.spatial.maine.edu/~worboys/processes/hoare</a> axiomatic.pdf) C. A. R. Hoare<br>Tony Hoare名下的公理化语义（Axiomatic Semantics）。</li><li><a href="http://www.usingcsp.com/">Communicating Sequential Processes (CSP)</a> C. A. R. Hoare<br>Hoare, 又见Hoare。</li><li><a href="http://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf">Call-by-name, call-by-value, and the lambda calculus</a> Gordon Plotkin</li><li><a href="ftp://ftp.cs.cmu.edu/user/jcr/theotypestr.pdf">Towards a theory of type structure</a> John C. Reynolds号称经典中的经典。</li><li><a href="http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf">Structured Programming with go to Statements</a> Donald E. Knuth</li><li><a href="ftp://ftp.cs.cmu.edu/user/jcr/defint.ps.gz">Definitional interpreters for higher-order programming languages</a> John C. Reynolds</li><li><a href="http://www.slac.stanford.edu/pubs/slacreports/slac-r-114.html">An APL Machine 1970</a> Philip S. Abrams</li><li><a href="http://www-db.stanford.edu/pub/papers/google.pdf">The Anatomy of a Large-Scale Hypertextual Web Search Engine</a> Sergey Brin and Lawrence Page</li><li><a href="http://www-inst.eecs.berkeley.edu/~maratb/readings/NoSilverBullet.html">No Silver Bullet: Essence and Accidents of Software Engineering</a> Frederic P. Brooks, Jr.</li><li><a href="http://www.unil.ch/webdav/site/ling/shared/ElementStatText/Shannon1948.pdf">A Mathematical Theory of Communication</a> Claude Shannon</li><li><a href="http://www.cs.ubc.ca/~murphyk/Bayes/Charniak_91.pdf">Bayesian Networks without Tears</a><br><a href="http://www.stanford.edu/class/ee398a/resources/ziv:77-SDC.pdf">A Universal Algorithm for Sequential Data Compression</a></li><li><a href="http://www.cs.duke.edu/~junyang/cps216/papers/codd-1970.pdf">A Relational Model of Data for Large Shared Data Banks 1970</a> Edgar F. Codd</li><li><a href="http://compilers.iecc.com/crenshaw/">Let’s Build a Compiler 1988-1995</a></li><li><a href="http://gnowledge.sourceforge.net/damashek-ngrams.pdf">Gauging Similarity via N-Grams: Language-Independent Sorting…</a> Marc Damashek</li><li><a href="http://www.dreamsongs.com/WorseIsBetter.html">Worse Is Better</a> Richard P. Gabriel</li><li><a href="http://www.cs.berkeley.edu/~necula/cs263/handouts/hoarehints.pdf">Hints on Programming Language Design</a> C.A.R. Hoare</li><li><a href="http://www.math.chalmers.se/~rjmh/Papers/whyfp.pdf">Why Functional Programming Matters</a> John Hughes</li><li><a href="http://www.ccs.neu.edu/scheme/pubs/scp91-felleisen.ps.gz">On the Expressive Power of Programming Languages</a> Matthias Felleisen</li><li><a href="http://www.metaobject.com/papers/Smallhistory.pdf">The Early History Of Smalltalk</a> Alan Kay</li></ul><p>Alan Kay评述Smalltalk的话：In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole–like data structures, procedures, and functions which are the usual paraphernalia of programming languages–each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computer all hooked together by a very fast network. Questions of concrete representation can thus be postponed almost indefinitely because we are mainly concerned that the computers behave appropriately, and are interested in particular strategies only if the results are off or come back too slowly.</p><ul><li><a href="http://fresh.homeunix.net/~luke/misc/knuth-turingaward.pdf">Computer Programming as an Art</a> Donald E. Knuth</li><li><a href="http://www.cs.utah.edu/~wilson/compilers/old/papers/p157-landin.pdf">The next 700 programming languages</a> Peter J. Landin</li><li><a href="http://www-formal.stanford.edu/jmc/recursive.html">Recursive Functions of Symbolic Expressions and their Computation by Machine (Part I) 1960</a> John McCarthy</li><li><a href="http://www.cs.wisc.edu/~bolo/shipyard/4th_1970/4th_1970.html">FORTH - A Language for Interactive Computing</a> Charles H.Moore</li><li><a href="http://www.norvig.com/21-days.html">Teach Yourself Programming in Ten Years 2001</a> Peter Norvig</li><li><a href="ftp://publications.ai.mit.edu/ai-publications/500-999/AITR-595.ps">The Definition and Implementation of a Computer Language based on constraints</a> Guy Lewis Steele Jr.</li><li><a href="http://www.cs.umbc.edu/331/resources/papers/gls-grow-lang.pdf">Growing a Language</a> Guy Lewis Steele Jr.</li><li><a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html">Epigrams on Programming</a> Alan J. Perlis</li><li><a href="http://www.cs.helsinki.fi/u/gionis/cc05/cook.pdf">The Complexity of Theorem Proving Procedures</a> Stephen A. Cook</li><li><a href="http://web.media.mit.edu/~minsky/papers/steps.html">Steps Toward Artificial Intelligence</a> Marvin Minsky</li><li><a href="http://library.readscheme.org/page1.html">The Original ‘Lambda Papers’</a> Guy Steele and Gerald Sussman</li><li><a href="http://cm.bell-labs.com/cm/cs/who/dmr/cacm.html">The UNIX Time-Sharing System</a> Dennis Ritchie and Ken Thompson</li></ul><h2 id="Dreaming-In-Code-by-Scott-Rosenberg"><a href="#Dreaming-In-Code-by-Scott-Rosenberg" class="headerlink" title="Dreaming In Code by Scott Rosenberg"></a>Dreaming In Code by Scott Rosenberg</h2><p>作者把Chandler的开发历程，软件开发的历史，和软件开发的基础概念精巧地编织起来，只为探索一个问题：为什么软件开发那么困难？</p><ul><li>文字方面，作为多年文青，资深记者，<a href="http://www.salon.com/">Salon</a>的主编，Scott Rosenberg的笔头没得说。三年漫长写作和Chandler项目的艰辛曲折并没有消磨Scott的激情。相反，书中文字蕴涵着他对软件开发的热爱，很有感染力。书里涉及大量技术概念，从OOP到Literate Programming到停机问题，作者都科普得浅显明白。看局外人怎么理解软件开发，也是颇有意思的事情。</li><li>其次是资料翔实。光靠Wikipedia和Google随意搜寻是绝对写不出这样一本书的。大量的采访，连续三年实地跟踪Chandler项目组开会讨论，几百篇参考资料，包括大量经典论文和访谈录，和作者细心的整理，方才构成这本书丰厚的肌理。</li><li>三当然就是八卦满天飞了，尤其是著名项目和大牛们的故事及观点。呵呵。非常符合俺这种八卦爱好者的口味。虽然绝大部分八卦俺都知道，但放在软件开发这个大题目下系统读一次感觉还是不同。Alan Kay, Don Knuth, Alan Turning, Charles Simoni, Bill Joy, Frederick P. Brooks, David Parnas, Peter Drucker, Gerald Winberg, Douglas Engelbart等等等等。颇有新的领悟外，也是享受。书里也有一些俺从未听说的八卦。比如这条：一位叫Robert Britcher的程序员写了本回忆录，The Limits of Software，记录了美国航空管理局(FAA)1981年上马的AAS（Advanced Automation System）项目的悲惨过程。用Scott的话说，就是“没有人—哪怕作者—可以全身而退（No one—including, plainly, the author—escape scar free）。项目高峰期，1500名IBM程序员为FAA工作，每天花掉政府100万美元。项目最终失败了，因为项目的要求超出了当时技术和人力的极限。巨大的压力给参与项目的程序员带来心理上的严重创伤。有人砸烂自己的汽车。有人疯掉（我靠！），有人自杀。有个项目经理开始吃纸上瘾。项目拖后得越多，他在开会时嘴里的塞的纸就越多（靠靠靠！）。当初我读<a href="http://www.hevanet.com/chezxx/chezxx/ellen.html">Ellen Ullman</a>的小说The Bug的时候还对文中主角在地下室自杀有点不解。看来那也不是女文青Ellen自己的想当然。</li><li>书里记述了OASF(开发Chandler的组织)犯下的大量错误。这些案例值得我们学习。我觉得比较出奇的是Chandler项目成员开始决定用P2P架构这种来共享日历。虽然用P2P共享个人信息时非常困难的问题，但他们居然不全力设计相关算法或协议，而是花大量时间去讨论Chandler的界面。这一拖就是几个月。最后P2P架构被彻底放弃。<a href="http://blog.csdn.net/g9yuayon/archive/2005/01/13/251123.aspx">Damien</a>以一人之力搞出了基于文档的分布式数据库。不知道如果OASF找到Damien，情况会不会有所改观。Joel Spolsky已经写了篇关于OASF错误的<a href="http://www.joelonsoftware.com/items/2007/01/21.html">详尽评论</a>。强烈推荐。我就不饶舌了。</li><li>书的背面有若干书评。第一条是<a href="http://www.theatlantic.com/index/fiction">The Atlantic</a>的James Fallows写的，说Dreaming In Code可以和Tracy Kidder的《新机器的灵魂》（The Soul of a New Machine）媲美。Tracy Kidder的书是一代经典，写尽工程师的光荣与梦想。《新机器的灵魂》里电脑工程师为了做出新一代电脑同DEC的VAX竞争，破釜沉舟，灵魂冲突激荡。历经曲折后，项目终于成功。一时间彷佛东方有日出，喷薄欲破晓，好不酣畅淋漓。可惜，这种痛快的阅读感受在Dreaming In Code里体会不到。我想原因有二。一是Chandler是个失败（至少前途还不明朗）的项目。5年过去，几百万花掉，Chandler才到0.7版。当年的设计被一次又一次的更改。当年Mitche Kapor心目中的杀手特性被一个又一个地去掉。看到书的后半部分，俺甚至觉得有些郁闷。正因为这样，Dreaming In Code缺乏戏剧性。我们看不到有独特魅力的灵魂人物，比如《新》书里的Tom West，比如Show Stopper里的Dave Cutler。二是作者把Chandler的项目当作讨论软件开发为什么那么难的案例来写。这样做人物形象就显得比较单薄。书里很少描写Chandler项目组里的成员的心理和行为。我甚至不记得里面有谁曾经意气风发过。问题是，谁没有在设计自己心爱的软件时浑然忘我，神情激越过？这点更远远比不上《新》和Show Stopper。这两本书里的工程师有非常突出的个性。Dreaming In Code里看不到像Show Stopper里微软的愤青们鄙视IBM，决定中止同IBM OS/2团队合作的戏剧性场面的，看不到Jim Alchin早上五点钟跑到高尔夫球场与同事开会的疯狂场景，也看不到两个微软工程师决定到加勒比海边设计Windows NT的API，把他们的经理气得发疯，结果两人一周就搞定了1000多个API的初稿这样的传奇故事。甚至Mitch Kapor在Dreaming In Code里也像个好好先生。</li></ul><h2 id="阅读计划"><a href="#阅读计划" class="headerlink" title="阅读计划"></a>阅读计划</h2><p>看是永远都看不完的，等什么时候看完也就熄了。</p><h3 id="编程和编程语言"><a href="#编程和编程语言" class="headerlink" title="编程和编程语言"></a>编程和编程语言</h3><p><a href="http://www.amazon.com/gp/product/0596527756/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I353IT2HV9IEAF&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/730203c200c34dbca38b9eafe745fce4.png" alt="img"></a>: <a href="http://www.amazon.com/gp/product/0596527756/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I353IT2HV9IEAF&colid=2ABJRW1CNHP5W">Java Generics and Collections</a>。俺的偶像之一，<a href="http://www.haskell.org/">Haskell</a>背后的主要黑手，<a href="http://homepages.inf.ed.ac.uk/wadler/">Philip Wadler</a>的新作。俺这种庸俗追星族自然屁颠屁颠地来捧场了。</p><p><a href="http://www.amazon.com/gp/product/0596527756/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I353IT2HV9IEAF&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/6b5174a9722249b08b2ee2674f9b67f3.jpg" alt="img">: Java Concurrency in Practice</a>. 正在读这本书。Java 5 里java.util.concurrent主要作者的力作，不仅介绍java.util.concurrent的用法，更细述设计并发程序的理念和经验。Herb Sutterl老大2004年就吐血呐喊<a href="http://www.gotw.ca/publications/concurrency-ddj.htm">Free Lunch Is Over, All We Got Is Multi-core Dinner</a>，俺现在读这本书只算是亡羊补牢。</p><p><a href="http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/527b6760bb854d77ab913d8763b8cb4d.jpg" alt="img"></a>: <a href="http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996/">Javascript the definitive guide</a>. 今年颇写了些RIA应用。感受是：我恨HTML+CSS，但我爱Javascript。而且现在看来RIA越来越火（没办法，Google, Gucci, Nike, 和众多的Web2.0公司把门槛提高了）。俺向来认为做技术如杀敌，斩草须除根。所以今年要好好梳理一下JavaScript。今年初草草读过这本书第三版。现在第5版要出来了。据说有<a href="http://www.davidflanagan.com/blog/2006_08.html#000110">很多新内容</a>。Steve Yegge说他在Google<a href="http://steve-yegge.blogspot.com/2006/09/bloggers-block-3-dreaming-in-browser.html">的时候一个月把关于DHTML和CSS的书翻得快散架</a>，当是俺效仿的榜样。</p><p><a href="http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/ebc6ffd1b12246af8f16cda2ce0ed5d9.png" alt="img"></a>:<a href="http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf">Making Reliable Distributed Systems in the Presence of Software Errors</a>. Erlang的作者<a href="http://www.sics.se/~joe/index.html">Joel Armstrong</a>的博士论文。既然要学并发编程，不能说只懂synchronization不是？Erlang的消息传递好歹也是江湖一大显赫门派。所以俺准备今年学Erlang。<a href="http://blog.csdn.net/g9yuayon/archive/2005/01.aspx">牛人Damien Katz</a>强烈<a href="http://damienkatz.net/2006/12/erlang.html">推荐从这篇论文</a>开始，因为它解释了很多看似古怪的Erlan功能，而且阐述了Erlang的来龙去脉。考察一门技术的历史沿革总能让我们深刻理解这门技术。</p><p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/8ac9551c192548c2827f20e2ac743ef2.jpg" alt="img">](<a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/">http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/</a>): <a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/">Concepts, Techniques, and Models of Computer Programming</a>. 还没看，不过俺朋友和<a href="http://www.lambda-the-ultimate.org/">LtU</a>都强烈推荐。号称需要一读再读的经典。今年就补上这一课算了。</p><p><a href="http://www.amazon.com/Code-Complete-Second-Steve-McConnell/dp/0735619670/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/5e61034c49b74741b3e54ead63a60099.jpg" alt="img"></a><a href="http://www.amazon.com/Code-Complete-Second-Steve-McConnell/dp/0735619670/">Code Complete, 2nd ed</a>. 大三时细读了第一版，至今受益。去年借来第二版，可耻地只翻了几页。今年纯还债。</p><h3 id="设计和架构"><a href="#设计和架构" class="headerlink" title="设计和架构"></a>设计和架构</h3><p><a href="http://www.amazon.com/gp/product/1563272822/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/998742e10d9a4d09b643b9ff6716afc4.jpg" alt="img"></a>：<a href="http://www.amazon.com/gp/product/1563272822/">The Toyota Product Development System</a>. 丰田的Lean Development模式开始慢慢影响到软件开发。据说丰田的开发方法里颇有些看似违反常理的东西，让人非常好奇。</p><p><a href="http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321246756/"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/ce87955cf7f64611a2252f6c01512cb2.jpg" alt="img"></a>：<a href="http://www.amazon.com/Framework-Design-Guidelines-Conventions-Development/dp/0321246756/">Framework Design Guidelines</a>. 据说书的前身是微软的内部开发文档。好奇微软是怎么设计框架的。</p><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p><a href="http://www.amazon.com/gp/product/0735605351/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IUDWD4CHBKEG7&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/d6d86c11b35b4ac9a49ed378f072b539.png" alt="img"></a>：<a href="http://www.amazon.com/gp/product/0735605351/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IUDWD4CHBKEG7&colid=2ABJRW1CNHP5W">Software Estimation: Demystifying the Black Art (Best Practices (Microsoft))</a>. Steve McConnell的新作。我的弱点之一就是不能准确地估计项目的开销。很想知道喜好CMM/COCOMO这类重口味的Steve怎么解决这个问题。</p><p><a href="http://www.amazon.com/gp/product/0596007868/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IZG9SF0WJQ0TK&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/136768a0c83e48fc86f980f0e2973c58.png" alt="img"></a>： <a href="http://www.amazon.com/gp/product/0596007868/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=IZG9SF0WJQ0TK&colid=2ABJRW1CNHP5W">The Art of Project Management</a>。 <a href="http://www.scottberkun.com/blog/">Scott Berkun的博客</a>已经精彩纷呈。这本书放在我的<a href="http://www.amazon.com/gp/registry/registry.html/002-3075099-4991226?ie=UTF8&type=wishlist&id=2ABJRW1CNHP5W">wish list</a>好久了。今年也该读了。</p><p><a href="http://www.amazon.com/gp/product/0976694026/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I2H5WMRDY8RU5V&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/14d5f795cca243508579bb70564d17be.png" alt="img"></a>: <a href="http://www.amazon.com/gp/product/0976694026/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I2H5WMRDY8RU5V&colid=2ABJRW1CNHP5W">Behind Closed Doors: Secrets of Great Management</a>。好评如潮的书。也是放在我的wish list里N久了。纯清除债务。</p><p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/df3f7c8bf4324fc58bfda08c3c107e5b.png" alt="img">: <a href="http://www.amazon.com/gp/product/0684852861/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I1A5Z7RQ7QPMS7&colid=2ABJRW1CNHP5W">First, Break All the Rules</a>. 健身房/洗衣房专用书。蹬自行车时看的。已经读了3/4了。学到不少东西。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p><a href="http://www.amazon.ca/gp/product/0060891548/ref=wl_it_dp/702-9176350-4107258?ie=UTF8&coliid=I3I6RQ76H9RL7V&colid=2J3936VCCJU2"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/f45a5ca5773d45c6ada39536df2026ca.png" alt="img">: On Writing Well.</a> 谈写作的经典小册子。其实我更想向冯唐那么牛，写出动人的文字。可惜跑到当当上搜了半天，都没发现一本看上去不错的写作书。什么SAT写作，GMAT写作这类垃圾书倒一大堆。</p><h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p><a href="http://www.amazon.com/MMIXware-RISC-Computer-Third-Millennium/dp/3540669388/sr=8-1/qid=1167808380/ref=pd_bbs_sr_1/002-3075099-4991226?ie=UTF8&s=books"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/28e1264027f84a6faccc2ff1efd2848c.png" alt="img">：MMIXWare</a>。Knuth的书。买了好几年了。一直说写一个MMIXWare的虚拟机一直没动手。鄙视自己很久了。想到一个传说。Steve Jobs邀请Knuth给苹果公司的工程师讲课。听说Knuth到了，Jobs赶快迎出办公室。同Knuth握手后说：Knuth教授，真荣幸见到你。我读过你的所有作品。Knuth答道：Steve, you’re full of shit。</p><p><a href="http://www.amazon.ca/gp/product/3540002960/ref=wl_it_dp/702-9176350-4107258?ie=UTF8&coliid=IS9XC85RJIE8K&colid=2J3936VCCJU2"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/179426731999446c942fa5bb049e1848.png" alt="img">:Verification of Reactive Systems。</a>写论文用。买了快两年了，才读了两章。做人还是比较失败。</p><p><a href="http://www.amazon.com/gp/product/3540224947/ref=wl_it_dp/103-2894649-9471814?ie=UTF8&coliid=I3P6O2GKRHHRHS&colid=2ABJRW1CNHP5W"><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/g9yuayon/5c189f3b4b744db686f3eb90a79dfd03.png" alt="img">：How to Solve It： Modern Heuristics</a>。看了三章了。</p><h2 id="Never-Stop-Learning"><a href="#Never-Stop-Learning" class="headerlink" title="Never Stop Learning"></a>Never Stop Learning</h2><p>Steve Yegge的<a href="http://steve-yegge.blogspot.com/2006/12/i-take-it-all-back-send-me-your-money.html">新文章</a>。 现在笔头好又肯耐心写文章的技术博客作者其实不多。Paul Graham和Steve Yegge是其中的佼佼者。新文章里这句话可作俺们程序员的座右铭：Every program you write should be the hardest you’ve ever written （你写的每个程序都应是你曾写过的最难的程序）。</p><h2 id="注意力"><a href="#注意力" class="headerlink" title="注意力"></a>注意力</h2><p>从<a href="http://headrush.typepad.com/creating_passionate_users">Keria Serria</a>的博客看到的<a href="http://headrush.typepad.com/creating_passionate_users/2006/12/httpwww37signal.html">好文章</a>。<a href="http://scientificamerican.com/print_version.cfm?articleID=00010347-101C-14C1-8F9E83414B7F4945">非凡的注意力</a> <a href="http://headrush.typepad.com/creating_passionate_users/2006/03/how_to_be_an_ex.html">造就专家</a>，智力起的作用其实不大。偏偏现在干扰越来越多。而且真正的干扰源自我们的内心。频繁地查信，随时随地地QQ/MSN，阅读无穷无尽的blog。。。到底怎么办呢？仔细读Kerria的帖子吧。</p><p><a href="programming.reddit.com">programming</a>reddit论坛大量文章都值得收藏。更重要的是，上面好多文章并非热门应景帖子，靠自己根本不能发现。其实这也是reddit这类所谓web2.0网站吸引用户的原因：现在的网络实在太庞大了。搜索引擎已经不能解决我们的问题，因为我们往往并不知道自己需要搜索什么。有时候，我们更需要一个“发现”引擎，根据我们的喜好帮我们发现合适的资料，推荐给我们。当然，reddit.com不算现在流行的推荐系统（比如findory.com那样的），但他利用大众的智慧，的确推荐了无数高质量文章。而且推荐的文章不局限于任何一门语言，技术，框架，平台。有<a href="http://notvincenz.blogspot.com/2006/11/delimited-continuations.html">讨论编程技巧</a>的，有<a href="http://mark.aufflick.com/blog/2006/11/25/douglas-engelbart-father-of-more-than-just-the-mouse">介绍牛人的，</a> 有<a href="http://www.oreillynet.com/onjava/blog/2006/11/open_java_changes_everything.html?CMP=OTC-FP2116136014&ATT=Open+Java+changes+Everything">讨论技术趋势</a>的，有<a href="http://sigfpe.blogspot.com/2006/11/yoneda-lemma.html">谈理论的</a>，有<a href="http://weblog.raganwald.com/2006/11/what-is-managing-software-development.html">谈项目管理</a>的，有<a href="http://blogs.msdn.com/patrick_dussud/archive/2006/11/21/how-it-all-started-aka-the-birth-of-the-clr.aspx">谈历史八卦</a>（谁知道.NET的CLR是怎么诞生的？谁知道CLR的GC原型是Common Lisp写的？<img src="https://blog.csdn.net/fckeditor/editor/images/smiley/msn/shades_smile.gif" alt="img">）的，有<a href="http://mitpress.mit.edu/SICM/">介绍书籍</a>的，有<a href="http://www.blog.sethroberts.net/2006/11/26/brian-wansink-on-research-design/">介绍工具</a>的，有<a href="http://scienceblogs.com/goodmath/2006/11/why_haskell.php">介绍语言</a>的。。。不一而足。而且有浅显得博客帖子，也有深入的<a href="http://www.usingcsp.com/cspbook.pdf">经典</a>。</p><p>形式化方法在CS研究中的重要性。一旦抵触情绪消失，注意力就集中了，那些符号也没那么难懂了。</p><p>Danny Hillis有篇<a href="http://www.longnow.org/views/essays/articles/ArtFeynman.php">极为动人的文章</a>，讲述费因曼在Connection Machine Inc时的传奇故事。文章里提到费因曼把每个问题当成一个游戏，总是从“给我一个最简单的例子”这样的问题入手，一直到把一个大问题简化成一系列他能解决的小问题为止。我套用了一下，效果还不错。另外就是把注意力集中在公式的直观意义，尤其是同数据流图的对应关系上。很多复杂公式一下就清晰了。这个手段其实从学数学就开始用。也许本科前的数学本来就直观，</p><p>挑战不是别人给的，而是在勃勃雄心驱使下，你自己找的。也许以后做每个项目时，我们应该给自己找点有挑战性的问题，激发自己的潜力。不然做的项目再多，也不过浪费人生。</p><h2 id="商业软件编程"><a href="#商业软件编程" class="headerlink" title="商业软件编程"></a>商业软件编程</h2><p>三篇博客帖子详解</p><ul><li>一篇是<a href="http://www.thoughtworks.com/">Thoughtworks</a>前员工Ravi Mohan写的，《<a href="http://ravimohan.blogspot.com/2006/07/but-martin-enterprise-software-is.html">但是</a><a href="http://ravimohan.blogspot.com/2006/07/but-martin-enterprise-software-is.html">马老大，商业编程就是无聊</a>》。</li><li>　第二篇帖子是<a href="http://weblog.raganwald.com/">Reg Braithwaite</a>的一篇帖子，《<a href="http://weblog.raganwald.com/2006/09/business-programming-simply-isnt-that.html">商业编程没有那么难？》</a>。<br>＊　第三篇帖子是XML发明人<a href="http://www.tbray.org/ongoing/">Tim Bray</a>的一篇<a href="http://www.tbray.org/ongoing/When/200x/2006/09/11/Other-Languages">短文</a>。在Tim的<a href="http://www.tbray.org/ongoing/When/200x/2006/09/07/JRuby-guys">努力</a>下，JRuby的两个主程加入了Sun。</li></ul><h2 id="注意力比较集中"><a href="#注意力比较集中" class="headerlink" title="注意力比较集中"></a>注意力比较集中</h2><p>随着年岁增长，要学的东西只多不少。书桌上的论文摞得越来越高，买而未读的书越来越多，没做的项目列表越来越长。怎么办呢？也许该去看心理医生了。</p><p>提高效率的最简单的方法就是，增加兴趣。</p><h2 id="学生应该做好一件事"><a href="#学生应该做好一件事" class="headerlink" title="学生应该做好一件事"></a>学生应该做好一件事</h2><p><a href="http://www.thoughtworks.com/"><strong>ThoughtWorks</strong></a>的<a href="http://www.chadfowler.com/"><strong>Chad Fowler</strong></a>面试Java程序员时，让应试人给自己的的Java功底按1到10打分。如果面试人打分在9以上，Chad Fowler就会问“你能不能谈谈怎么让JVM当掉”。原因很简单，打分在9以上，面试人显然是个Java专家，那自然得展示点Java专家的道行。好比马戏团招杂耍演员。一个候选人说，我会同时抛5个球，一边抛一边还可以空翻360度攀爬红绿灯追公车（朋友语）。面试官难道当场录用这个候选人？当然不。是骡子是马，得拉出来溜溜。你状态不好，抛不了5个球，总可以表演一下抛三个吧？不能空翻360度，转个圈儿总行吧？面试前没有翻书复习，记不清<a href="http://en.wikipedia.org/wiki/Binary_decision_diagram"><strong>OBDD</strong></a>怎么实现，说说怎么用Hash总可以吧？</p><p>自称“了解数据库”，却答不上基本的数据库问题，面试官当然怀疑你的能力，甚至你的诚正。自称酷爱编程，却连二分查找都写不出来，那不是搞笑么？自称聪明伶俐，你的专业课却门门挂红，不是很讽刺么？什么，老师教得太差？课程太枯燥？也就是说，你告诉我因为该做的事情不合心意，你就乱来？问问自己，这样的人公司敢要么？我就不用评论有的人把高数，线代，计算理论什么的都通通归于没有意义的课程了吧？当然，我们不排除有编程高手不能兼顾学业。没关系，那展示一下你的编程成果啊。如果Linux kenerl里有你的patch，我可以相信你的操作系统课不及格事出有因。如果你有自己的3D游戏（一个ray tracer也中），我可以对你线性代数挂红视而不见。但如果你成绩一塌糊涂，也没有拿得出手的软件作品，面试官怎么能相信你是一个聪明可靠，勤勉好学的人才，怎么能得出你四年来没有虚度的结论？不排除有人大器晚成，但对不起，大器晚成的风险属于不可控型，我们只能祝你好运。</p><p>其实就是菜，动力很小，借口很多。</p><ul><li>开发工具</li><li>Build工具</li><li>测试工具</li><li>网页自动测试</li><li>性能测试</li><li>覆盖测试</li><li>测试环境</li><li>静态代码分析</li><li>排版工具</li><li>JSP开发</li><li>数据库</li><li>版本控制</li><li>CASE</li></ul><p>程序员嘛，就应该琢磨怎么提高自己的效率。</p><p>被玩儿一次，别人可耻；被玩儿两次，自己该死（fool me once, shame on you; fool me twice, shame on me)。</p><h2 id="学生建议"><a href="#学生建议" class="headerlink" title="学生建议"></a>学生建议</h2><p><a href="http://www.joelonsoftware.com/">www.joelonsoftware.com</a>上的精妙杂文。还好，网上总有热情洋溢的自愿者。这不，Joel的一篇精妙文章被翻译成中文了。强烈推荐一把：<a href="http://chinese.joelonsoftware.com/Articles/AdviceforComputerScienceC.html">http://chinese.joelonsoftware.com/Articles/AdviceforComputerScienceC.html</a></p><ol><li>毕业前学会写作</li><li>毕业前学会C语言</li><li>毕业前学习微观经学（microeconomics）</li><li>要因为某些非计算机课程枯燥无趣就敬而远之</li><li>学习有大量编程实践的课程  </li><li>不要担心工作都跑到印度去了</li><li>好好做夏季毕业实习</li></ol><p>Linus精通写作，他知道如何准确地在email和邮件讨论组中使用书面英语表达自己的思想，所以他能够从全世界召集大量志愿者为Linux工作。你听说过最近风靡全世界的极限编程（Extreme Programming）吗？ 即使你不懂什么是极限编程，你至少听说过这个词。为什么？因为宣传极限编程的人都是天才的作者和演说家。就看看你身边的那些小型的软件开发组织吧，最有权力和影响力的人是那些可以用自信，准确，舒适的英语交流的人。好吧，我承认这些人也许言过其实，但是你无可奈何。</p><p>一个合格的程序员和一个伟大的程序员的区别不在于知道多少种编程语言，不在于他们是<a href="http://www.paulgraham.com/gh.html">喜欢Python或者Java</a>，而是在于他们是否擅长表达。他们能够说服，所以他们获得权力。他们能够写清楚明白的评论和接口文档，所以他们使得别人不用<a href="http://www.joelonsoftware.com/articles/fog0000000069.html">重写</a>，而可以重用他们的代码，否则他们的代码就是毫无用处的。他们也能够写出清晰的用户手册，于是最终用户可以理解他们的代码是做什么用的，明白了他们的工作的价值。sourceforge埋葬着许多精美的代码，这些已死的代码无人使用，因为代码的作者很少写（或者根本不写）用户手册。</p><p>我不会雇佣一个不懂写作的程序员。如果你擅长写，你就很容易找到工作，紧接着你就会被要求写技术规格文档，这意味着你已经被管理层注意到了。大学里有一些课程，要求你做很多的写作练习，不要犹豫，赶快参加这些课程。不要错过任何要求你每周或者每天练习写作的课程。给自己建立一个网络日志（weblog）。在上面写的越多，你会写地越容易。写地越容易，你就写地越多，这是一个正向地循环激励。</p><p>握各种编程语言的程序员事实上用C来交流（lingua franca）；更重要的是，C比某些“现代”语言更接近机器语言。我不管现在大学里在教什么流行的垃圾语言（trendy junk），你至少得花一个学期接近机器。否则，<a href="http://www.joelonsoftware.com/articles/fog0000000319.html">你不可能使用高级语言写出高效的代码</a>。这意味这你不会有机会写编译器或者操作系统，也许这是更好的编程工作；别人不会相信你能够为大项目设计架构。无论你知道多少高级的控制结构，知道如何进行错误处理，如果你不能解释为什么**while （*s++ = *t++）;**的意思是进行字符串拷贝（而且对你而言这是世界上最自然，最易懂的代码），那么你就是在对编程一窍不通的状态下编程（programming based on superstition）。</p><p>无论如何请学习微观经济学，因为你需要知道什么是“供给和需求”，什么是竞争优势，什么是净现值（NPVs，Net Present Value，指项目经济寿命期内现金流入总和与现金流出总和之差额），什么是折扣和边际效用（discounting and marginal utility），如果你真想了解商业是如何运作的话。为什么计算机系的学生要学习经济学？因为理解商业基本规律的程序员对商业界来说是宝贵的程序员。我记得无数个程序员使我非常沮丧，因为他们在代码中坚持某些疯狂的设计，这些设计从技术上来说，完美；从资本主义的角度来看，发疯。如果你是一个理解商业的程序员，商业会给你回报。这就是你要学习经济学的原因。</p><h2 id="程序员职业规划：让自己重要"><a href="#程序员职业规划：让自己重要" class="headerlink" title="程序员职业规划：让自己重要"></a>程序员职业规划：让自己重要</h2><ol><li>调研</li><li>投资</li><li>营销</li><li>执行</li></ol><p>单纯的编程已经不够了。了解业务逻辑，了解管理流程，能把自己的技术和商务结合起来，解决实际的问题，才大有作为。作者建议我们有空读行业杂志，和做业务的同事多交流。</p><p>Pragmatic Programmer的另一个作者Dave的**<a href="http://www.pragmaticprogrammer.com/talks/HowToKeepYourJob/HTKYJ.html">How To Keep Your Job</a>**是必读材料，非常有启发性。</p><p>转行的原因不过是发现自己坐在电脑前的时间远远超过了坐在课本前的时间。而且我没有耐性。看到本科花大力气学的东西，不过是为研究生阶段的学习做准备，就沮丧得不行。相比之下，搞计算机就舒服多了。每学一点东西，都可以马上试验，把玩，投入实用。现在想来，我也算幸运。</p><h2 id="学习理论的实用意义"><a href="#学习理论的实用意义" class="headerlink" title="学习理论的实用意义"></a>学习理论的实用意义</h2><ul><li>学习理论能拓展我们总结一般规律的能力。</li><li>学习理论能训练我们洞察不同事物间联系的能力。</li><li>学习理论让我们能迅速掌握计算机的前沿动态。</li></ul><p>没有一定的理论知识，还真看不懂，更不用说和论文的作者讨论了。别告诉我看论文不重要。要开发出别人开发不出的软件，光看<a href="http://www.ddj.com/"><strong>Dr. Dobb’s Journal</strong></a> 是远远不够的。</p><p>学习理论能训练我们对直观想法的表述能力。形式化方法要求我们把直观的描述转换成严格的数学描述，或者把一种形式的语言转换为另一种形式的语言。有时一个想法的直观意义明显，但它的形式化描述却不容易。比如说，把非正则的语言{aibi |i &gt; 0} 用Monadic Second Order Logic 表示为∃X ( X(min) ∧∀y∀z (S(y,z) =&gt; (X(y) &lt;=&gt; !X(z))) ∧ !X(max))。与此类似，编程语言也是一种形式化的语言（最主要的特征：没有二义性，和严格受限的语素）。我们编程时也面临把心中想法转换成一行行程序的问题。至少对我来说，学习理论扩展了我对形式化语言的驾驭能力，让我相对轻松地把复杂的想法转化成精简的数学或算法语言描述。</p><h2 id="程序员的效率"><a href="#程序员的效率" class="headerlink" title="程序员的效率"></a>程序员的效率</h2><p><a href="http://forums.construx.com/blogs/stevemcc/archive/2008/03/27/productivity-variations-among-software-developers-and-teams-the-origin-of-quot-10x-quot.aspx">Steve McConnell的博客帖子</a>。详述了程序员产率相差10倍的来历。插草标 卖身推荐。引用一段：80年代中期，波音上了一坨重要项目。80枚程序员参与其中。项目不顺利，眼看要错过一坨不容错过的最后期限。为了保证该项目成功，波音调走了这80枚老大，请来<strong>一个人。</strong>于是这枚老大以一人之力，按时按量交割项目。</p><p>Eric在他的<a href="http://software.ericsink.com/Abstraction_Pile.html">blog</a>里也提到他曾犯的类似错误，磨刀不误砍柴功。项目刚开始的时候，无数的书都说了有复杂关系的数据存取用EntityBean不错，但我居然没仔细想过别人为什么那样坚持，也没有深入调查，全忘了古训：事豫则立，不豫则废。 </p><h2 id="编程高手"><a href="#编程高手" class="headerlink" title="编程高手"></a>编程高手</h2><p>目前来看都是不可超越的大山</p><h3 id="编程高手-1-–-Bill-Joy"><a href="#编程高手-1-–-Bill-Joy" class="headerlink" title="编程高手 (1) – Bill Joy"></a>编程高手 (1) – Bill Joy</h3><p>Bill Joy, 前任Sun的首席科学家，当年在Berkeley时主持开发了最早版本的BSD。他还是vi和csh的作者。当然，<a href="http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/">Csh Programming Considered Harmful</a> 是另一个话题乐。据说他想看看自己能不能写个操作系统，就在三天里写了个自己的Unix, 也就是BSD的前身。当然是传说了，但足见他的功力。另一个传说是，1980年初的时候，DARPA让BBN在Berkley Unix里加上BBN开发的TCP/IP代码。但当时还是研究生的B伯伯怒了，拒绝把BBN TCP/IP加入BSD，因为他觉得BBN的TCP/IP写得不好。于是B伯伯出手了，端的是一箭封喉，很快就写出了高性能的伯克利版TCP/IP。当时BBN和DARPA签了巨额合同开发TCP/IP Stack，谁知他们的代码还不如一个研究生的好。于是他们开会。只见当时B伯伯穿个T-shirt出现在会议室(当时穿T-shirt不象现在，还是相当散漫的哈)。只见BBN问：你怎么写出来的？而B伯伯答：简单，你读协议，然后编程就行了。最令偶晕倒的是，B伯伯硕士毕业 后决定到工业界发展，于是就到了当时只有一间办公室的Sun, 然后他就把Sparc设计出 来乐。。。象这种软硬通吃的牛人，想不佩服都不行的说。据Bill Joy的同事说，一般开会的时候B伯伯总是拿一堆杂志漫不经心地读。但往往在关键之处，B伯伯发言，直切要害，提出 漂亮的构想，让同事们彻底崩溃。对了，他还是Java Spec和JINI的主要作者之一。</p><h3 id="编程高手-2-–-John-Carmack"><a href="#编程高手-2-–-John-Carmack" class="headerlink" title="编程高手 (2) – John Carmack"></a>编程高手 (2) – John Carmack</h3><p>John Carmack，id Software的founder和Lead Programmer。上个月和一个搞图形的师兄聊天，他竟然不知道John Carmack, 也让偶大大地晕了一把。不过也许搞研究的和搞实战的多少有些隔吧。想必喜欢第一人称射击游戏的都知道J哥哥。90年代初只要能在PC上搞个小动画都能让人惊叹一番的时候，J哥哥就推出了石破天惊的Castle Wolfstein, 然后再接再励，doom, doomII, Quake…每次都把3-D技术推到极致。J哥哥的简历上说自己的专长是”Exhaust 3-D technology”，真是牛人之言不我欺的说。做J哥哥这样的人是很幸福的，因为各大图形卡厂家一有了新产品就要向他“进贡” ，不然如果他的游戏不支持哪种卡，哪种卡基本就会夭折乐。当初MS的Direct3D也得听取 他的意见，修改了不少API。当然，J哥哥在结婚前十数年如一日地每天编程14小时以上， 也是偶们凡人望尘莫及的。对了，J哥哥高中肆业(？)，可以说是自学成才。不过呢，谁要用这个例子来为自己学习不好辩护，就大错特错了。那Leonardo Da Vinci还是自学成才呢(人是私生子，不能上学)。普通人和天才还是有区别的。对了，其实偶们叫“达分奇”是相当不对的，因为Vinci是地名，而Da Vinci就是从Vinci来的人的意思。换句话说，Leonardo Da Vinci就是“从Vinci来的Leonardo”的意思。叫别人“Da Vinci”就不知所谓乐。嗯，扯远了，打住。</p><h3 id="编程高手-3-–-David-Cutler"><a href="#编程高手-3-–-David-Cutler" class="headerlink" title="编程高手 (3) – David Cutler"></a>编程高手 (3) – David Cutler</h3><p>David Cutler，VMS和Windows NT的首席设计师，去微软前号称硅谷最牛的kernel开发员。当初他和他的手下在微软一周内把一个具备基本功能的bootable kernel写出来，然后说：“who can’t write an OS in a week?”，也是牛气冲天的说。顺便说一句，D爷爷到NT3.5时，管理1500名开发员，自己还兼做设计和编程，不改coder本色啊。</p><p>D爷爷天生脾气火爆，和人争论时喜欢双手猛击桌子以壮声势。:-) 日常交谈F-word不离口。他面试秘书时必问：”what do you think of the word ‘fuck’?” ，让无数美女刹羽而归。终于有一天，一个同样火爆的女面对这个问题脱口而出：”That’s my favorite word”。于是她被录取乐，为D爷爷工作到NT3.5发布。</p><h3 id="编程高手-4-–-Donald-E-Knuth"><a href="#编程高手-4-–-Donald-E-Knuth" class="headerlink" title="编程高手 (4) – Donald E. Knuth"></a>编程高手 (4) – Donald E. Knuth</h3><p><a href="http://www-cs-faculty.stanford.edu/~knuth/">Don <strong>Knuth</strong></a>。高爷爷其实用不着偶多说。学编程的不知道他就好像学物理的不知道牛顿，学数学的不知道欧拉，学音乐的不知道莫扎特，学Delphi的不知到<a href="http://en.wikipedia.org/wiki/Anders_Hejlsberg"><strong>Anders</strong> <strong>Hejlsberg</strong></a>，或者学Linux不知道<a href="http://www.cs.helsinki.fi/u/torvalds/"><strong>Linus</strong> <strong>Torvalds</strong></a>一样，不可原谅啊。:-)为了让文章完整，就再罗唆几句吧。高爷爷本科时就开始给行行色色的公司写各种稀奇古怪的编译器挣外快了。他卖给别人时收一两千美元，那些公司拿了code，加工一下卖出去就是上万上十万。不过也没见高爷爷不爽过，学者本色的说。想想那可是60年代初啊，高爷爷写编译器写多了，顺带就搞出了个Attribute Grammar和LR(k)，大大地造福后人啊。至于高爷爷在CalTech的编程比赛(有Alan Kay得众多高高手参加)总是第一，写的Tex到86年就code freeze，还附带2^n美分奖励等等都是耳熟能详的，偶就不饶舌乐。</p><p>顺便说一下，高老大爷是无可争议的写作高手。他给<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0201558025/002-8183620-1376038?v=glance"><strong>Concrete Mathematics</strong> </a>写的前言可谓字字铿锵，堪为前言的典范。他的技术文章也是一绝，文风细致，解释精当，而且没有学究气，不失轻快跳脱。记得几年前读Concrete Mathematics，时不时开怀大笑，让老妈极其郁闷，觉得我nerdy到家，不可救药。其实呢，子非鱼，安知鱼之乐，更不知那完全是高爷爷的功劳。说到写作高手，不能不提<a href="http://www.cs.toronto.edu/~sacook/"><strong>Stephen</strong> A. <strong>Cook</strong></a>。他的文章当年就被我们的写作老师极力推荐，号称典雅文风的样本。库爷爷一头银发，身材颀长，总是面带谦和的微笑，颇有仙风道骨，正好和他的仙文相配的说。</p><p>高爷爷其实还是开源运动的先驱。虽然他没有象Richard Stallman那样八方奔走，但他捐献了好多作品，都可以在网上看到，比如著名的Mathematical Writing，MMIXWare，The Tex Book等，更不用说足以让他流芳百世的Tex乐。</p><h3 id="编程高手-5-–-Ken-Thompson"><a href="#编程高手-5-–-Ken-Thompson" class="headerlink" title="编程高手 (5) – Ken Thompson"></a>编程高手 (5) – Ken Thompson</h3><p>Ken Thompson，C语言前身B语言的作者，Unix的发明人之一(另一个是Dennis M. Riche老大，被尊为DMR)，Belle(一个厉害的国际象棋程序)的作者之一, 操作系统Plan 9的主要作者(另一个是大牛人Rob Pike, 前不久被google挖走了)。Ken爷爷也算是计算机历史上开天辟地的人物了。1969年还是计算机史前时代，普通人都认为只有大型机才能运行通用的操作系统，小型机只有高山仰止的份儿。至于用高级语言来写操作系统，更是笑谈。Ken爷爷自然不是池中物，于是他和DMR怒了，在1969年到1970间用汇编在PDP-7上写出了UNIX的第一个版本。他们并不知道，一场轰轰烈烈的UNIX传奇由此拉开了序幕。Ken爷爷在1971年又把Unix用C重写，于是C在随后20年成就了不知多少豪杰的梦想和光荣。</p><p>Ken爷爷还有段佳话： 装了UNIX的PDP-11最早被安装在Bell Lab里供大家日常使用。很快大家就发现Ken爷爷总能进入他们的帐户，获得最高权限。Bell Lab里的科学家都心比天高，当然被搞得郁闷无比。于是有高手怒了，跳出来分析了UNIX代码，找到后门，修改代码，然后重新编译了整个UNIX。就在大家都以为“这个世界清净了”的时候，他们发现Ken爷爷还是轻而易举地拿到他们的帐户权限，百思不解后，只好继续郁闷。谁知道这一郁闷，就郁闷了14年，直到Ken爷爷道出个中缘由。原来，代码里的确有后门，但后门不在Unix代码里，而在编译Unix代码的C编译器里。每次C编译器编译UNIX的代码，就自动生成后门代码。而整个Bell Lab的人，都是用Ken爷爷的C编译器。</p><h3 id="编程高手-6-–-Rob-Pike"><a href="#编程高手-6-–-Rob-Pike" class="headerlink" title="编程高手 (6) – Rob Pike"></a>编程高手 (6) – Rob Pike</h3><p>Rob Pike, AT&amp;T Bell Lab前Member of Technical Staff ，现在google研究操作系统。罗伯伯是Unix的先驱，是贝尔实验室最早和Ken Thompson以及Dennis M. Ritche开发Unix的猛人，UTF-8的设计人。他还在美国名嘴David Letterman的<a href="http://www.cbs.com/latenight/lateshow/"><strong>晚间节目</strong></a>上露了<a href="http://www.cs.bell-labs.com/who/rob/movies/letterman.mpg"><strong>一小脸</strong></a>，一脸憨厚地帮一胖子吹牛搞怪。让偶佩服不已的是，罗伯伯还是1980年奥运会射箭的银牌得主。他也是个颇为厉害的业余天文学家，设计的珈玛射线望远镜差点被NASA用在航天飞机上。他还是两本经典，<a href="http://cm.bell-labs.com/cm/cs/upe"><em><strong>The Unix Programming Environment</strong></em></a> 和 <a href="http://cm.bell-labs.com/cm/cs/tpop"><em><strong>The Practice of Programming</strong></em></a> 的作者之一。如果初学者想在编程方面精益求精，实在该好好读读这两本书。它们都有中文版的说。罗伯伯还写出了Unix下第一个基于位图的窗口系统，并且是著名的blit 终端的作者。当然了，罗伯伯还是号称锐意革新的操作系统，Plan9，的主要作者。可惜的是，Plan9并没有引起多少人的注意。罗伯伯一怒之下，写出了振聋发聩的雄文 <a href="http://www.cs.bell-labs.com/who/rob/utah2000.pdf"><em><strong>Systems Software Research is Irrelevant</strong></em></a>，痛斥当下系统开发不思进取，固步自封的弊病。虽然这篇文章是罗伯伯含忿出手，颇有偏激之词，但确实道出了系统开发的无奈：开发周期越来越长，代价越来越大，用户被统一到少数几个系统上，结果越来越多的活动是测量和修补，而真正的革新越来越少。</p><p>就在罗伯伯郁闷之极的时候，google登门求贤来乐。如果说现在还有一家大众公司在不遗余力地把系统开发推向极致的话，也就是google乐。随便看看google的<a href="http://labs.google.com/"><strong>成果</strong></a>就知道了。具有超强容错和负载平衡能力的分布式文件系统<a href="http://www.cs.rochester.edu/sosp2003/papers/p125-ghemawat.pdf">GFS</a> (现在能够用100,000台廉价PC搭起一个巨型分布系统，并且高效便宜地进行管理的系统也不多哈)，大规模机器学习系统(拼写检查，广告匹配，拼音搜寻。。。哪个都很牛的说)，更不用说处理海量并行计算的各式google服务了。Rob在System Software Research is Irrelevant里萧瑟地说现在没有人再关心系统研究的前沿成果了。想不到他错了，因为google关心。google网络了<a href="http://labs.google.com/why-google.html"><strong>大批功成名就的牛人</strong></a>，还有大量初生牛犊般博士做开发，显然不是没事耍酷，而是因为它们的开发总是试图吸取系统研究的最新成果。想必Rob Pike在google很幸福。愿他做出更棒的系统。</p><h3 id="编程高手-7-–-Dennis-M-Ritchie"><a href="#编程高手-7-–-Dennis-M-Ritchie" class="headerlink" title="编程高手 (7) – Dennis M. Ritchie"></a>编程高手 (7) – Dennis M. Ritchie</h3><p>既然<a href="http://blog.csdn.net/g9yuayon/archive/2004/07/06/34882.aspx"><strong>Ken Thompson</strong></a>是我的偶像，新闻组上人称DMR的<a href="http://www.cs.bell-labs.com/who/dmr/"><strong>Dennis M. Ritchie</strong></a>自然也是，毕竟两人共同缔造了UNIX，而Dennis几乎独力把C搞大(当然，C的前身是B，而B是Ken Thompson一手做出来的)。J 两人1983年分享<a href="http://www.acm.org/awards/taward.html"><strong>图灵奖</strong></a>，是有史以来少数几个因工程项目得奖的工程师(本来是唯一的一对儿，但<a href="http://www.smalltalk.org/alankay.html"><strong>Alan Kay</strong></a>才因为<a href="http://www.smalltalk.org/">SmallTalk</a>得奖，所以就成了唯二的乐) 。一个人一生能做出一个卓越的系统已经不易，DMR的C和UNIX长盛不衰近30年，至今生机勃勃，DMR此生可以无憾的说。</p><h3 id="编程高手-8-–-Edsger-Wybe-Dijkstra"><a href="#编程高手-8-–-Edsger-Wybe-Dijkstra" class="headerlink" title="编程高手 (8) – Edsger Wybe Dijkstra"></a>编程高手 (8) – Edsger Wybe Dijkstra</h3><p>戴爷爷大概因为最短路径算法一战成名，于是有人请他参加另一台计算机X1的设计工作，并且把设计实时中断系统的任务派给了他。现在看来实时中断也许不算什么，但要知到，X1前根本就没有实时中断的概念。实现它简直就是一场豪赌。戴爷爷起初还不情愿，但经不住项目负责人Bram和Carel的轮番“吹捧”：我们知道实时中断让您工作变得非常困难，但象您这样的牛人肯定能做出来的说。结果戴爷爷被糖衣炮弹彻底击穿，接下了这个烫手山芋。两三年后，他不仅搞出了实时中断，还围绕这个写出了自己的博士论文，顺利戴上博士帽。</p><h3 id="心目中的编程高手-9-–-Anders-Hejlsberg"><a href="#心目中的编程高手-9-–-Anders-Hejlsberg" class="headerlink" title="心目中的编程高手 (9) – Anders Hejlsberg"></a>心目中的编程高手 (9) – Anders Hejlsberg</h3><p>Anders Hejlsberg，微软.NET的首席架构师，编程语言设计和实现的顶尖高手。他一手做出了Turbo Pascal, 也是Delphi, J++(尤其是WFC)，C#, 和.NET的主要作者。这些作品的名字足以为他立传。作为一个程序员，我在这样的大师面前实在无语。生子当如Anders的说。李维的&lt;&lt;Borland传奇&gt;&gt;里已详细讲述了Anders的传奇故事，我就不用费舌了：<a href="http://java.mblogger.cn/iexploiter/posts/1505.aspx">http://java.mblogger.cn/iexploiter/posts/1505.aspx</a> 。 <a href="http://www.artima.com/">Artima</a>上有Anders谈C#的<a href="http://www.artima.com/intv/choices.html">系列访谈</a> 。MSDN上有一段Anders<a href="http://channel9.msdn.com/ShowPost.aspx?PostID=10116">导游的录像</a> 。有兴趣可以去看看牛人的丰采。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;内容相当丰富，这或许是最想要成为的模样。&lt;/p&gt;</summary>
    
    
    
    <category term="People that affect me" scheme="http://muxueweiyu.github.io/wiki/categories/People-that-affect-me/"/>
    
    
    <category term="affect" scheme="http://muxueweiyu.github.io/wiki/tags/affect/"/>
    
    <category term="people" scheme="http://muxueweiyu.github.io/wiki/tags/people/"/>
    
  </entry>
  
  <entry>
    <title>byvoid</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/byvoid/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/byvoid/</id>
    <published>2018-12-18T04:03:22.000Z</published>
    <updated>2021-03-21T06:47:46.357Z</updated>
    
    <content type="html"><![CDATA[<p>我希望可以站在前人的肩膀上注目远望，看看这万里风光，是否如我所想的一般。</p><span id="more"></span><h2 id="时光易逝"><a href="#时光易逝" class="headerlink" title="时光易逝"></a>时光易逝</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">劝君莫惜金缕衣</span><br><span class="line">劝君惜取少年时</span><br><span class="line">花开堪折直须折</span><br><span class="line">莫待无花空折枝</span><br></pre></td></tr></table></figure><p>曾经看过张昆玮学长的<a href="http://www.artofproblemsolving.com/blog/54270">一篇日志</a>。一个朋友在他29岁生日的时候，给过他年轻的朋友们一句话：「Gaudeāmus igitur, iuvenēs dum sumus（拉丁文）」，翻译是「在我们还年轻的时候，让我们快乐吧。」，换成一首诗就是「花开堪折直须折，莫待无花空折枝。」想想看，我们正当人生中最美好的岁月，为什么不去做自己喜欢的事情呢？不要被所谓的现实羁绊，试想人在年轻的时候如果还有如此多的「不能」，那么将来的「不能」祗会更多。所以，大胆去做吧，无需后悔。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我希望可以站在前人的肩膀上注目远望，看看这万里风光，是否如我所想的一般。&lt;/p&gt;</summary>
    
    
    
    <category term="People that affect me" scheme="http://muxueweiyu.github.io/wiki/categories/People-that-affect-me/"/>
    
    
    <category term="affect" scheme="http://muxueweiyu.github.io/wiki/tags/affect/"/>
    
    <category term="people" scheme="http://muxueweiyu.github.io/wiki/tags/people/"/>
    
  </entry>
  
  <entry>
    <title>微调</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/%E5%BE%AE%E8%B0%83/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/%E5%BE%AE%E8%B0%83/</id>
    <published>2018-11-07T05:23:03.000Z</published>
    <updated>2021-03-21T06:47:28.981Z</updated>
    
    <content type="html"><![CDATA[<p>做咸鱼没什么不好的，不过做条有梦想的咸鱼也不赖。</p><span id="more"></span><h2 id="工业界-学术界"><a href="#工业界-学术界" class="headerlink" title="工业界 学术界"></a>工业界 学术界</h2><p><strong>对于绝大部分人而言，努力成为交叉领域的熟手，远比成为计算机科学家要现实且有意义</strong><br>大部分人最终不会从事算法研究，而会奋斗在一线应用领域。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工业界未来需要什么样的机器学习人才？老生常谈，能将模型应用于专业领域的人，也就是跨领域让机器学习落地的人。我们需要并将长期需要这样的人才，这样的需求不会是昙花一现，这就跟web开发是一个道理，从火热到降温也经过了十年的周期。一个领域的发展有特定的周期，机器学习的门槛比web开发高而且正属于朝阳期，所以大家致力于成为“专精特定领域”的机器学习专家并不过时。</p><p><strong>能写代码、构建模型的人千千万，但理解自己在做什么，并从中结合自己的领域知识提供商业价值的人少之又少。</strong></p><p>调侃一句，哪个方向的机器学习人才最紧缺？答：每个领域都需要专精的机器学习人才，你对特定领域的理解就是你的武器。</p><h2 id="基本功"><a href="#基本功" class="headerlink" title="基本功"></a>基本功</h2><p>需要了解基本的数学统计知识即可，再一次重申，我对于算法的看法是大部分人不要造轮子，不要造轮子，不要造轮子！只要理解自己在做什么，知道选择什么模型，直接调用API和现成的工具包就好了。</p><ul><li>回归模型(Regression)</li><li>分类模型(Classification)</li><li>神经网络(Neural Networks)</li><li>数据压缩/可视化(Data Compression &amp; Visualization)</li><li>无监督学习和半监督学习(Unsupervised &amp; Semi-supervised Learning)</li></ul><p>基本功的意义是当你面对具体问题的时候，你很清楚可以用什么武器来处理</p><h2 id="秘密武器"><a href="#秘密武器" class="headerlink" title="秘密武器"></a>秘密武器</h2><p>学生朋友们可以更多的关注自己感兴趣的领域，思考如何可以把机器学习运用于这个领域。而已经有了工作/研究经验的朋友，要试着将自己的工作经历利用起来。举例，不要做机器学习里面最擅长投资的人，而要做金融领域中最擅长机器学习的专家，这才是你的价值主张(value proposition)。最重要的是，机器学习的基本功没有大家想的那么高不可攀，没有必要放弃自己的本专业全职转行，沉没成本太高。通过跨领域完全可以做到曲线救国，化劣势为优势，你们可能比只懂机器学习的人有更大的行业价值。</p><p>对特定领域的深刻理解往往就是捅破窗户的那最后一层纸，只理解模型但不了解数据和数据背后的意义，导致很多机器学习模型只停留在好看而不实用的阶段</p><p>没有什么不会改变，这个时代的科技迭代速度很快。从深度学习开始发力到现在也不过短短十年，所以没有人知道下一个会火的是什么？以深度学习为例，这两年非常火的对抗生成网络(GAN)，多目标学习(multi-lable learning)，迁移学习(transfer learning)都还在飞速的发展。有关于深度学习为什么有良好泛化能力的理论猜想文章在最新的NIPS听说也录了好几篇。这<strong>都说明了没有什么行业可以靠吃老本一直潇洒下去，我们还需要追新的热点。</strong></p><p>技术总会过时，热点总会过去，但不会过去的是我们不断追求新科技的热情和对自己的挑战。</p><ul><li>物理就是物理，不分中华物理和美国物理。</li><li>数学就是数学，不分希腊数学和中华数学。</li></ul><p>绝大部分基础学科的知识都是不分国界的，如果不是因为德语普及程度不高，某些学科用德文教材也可以。</p><p>学知识，切忌就是追求无意义的形式，而抛弃了学习的本质。计算机领域一大禁忌就是重复造低质量的轮子，教科书同理。只要用外文书对于学习内容效率的提升大于语言障碍的影响，就该大力推崇。通过使用原版书和观看公开课，也是对于英语的一种锻炼。<strong>至少在理工科领域，大部分教材的阅读门槛没有想象中的高，且有助于提早训练学生进行学术写作，熟悉相关专业术语</strong>。</p><p>“评价一个艺术家的成就，你得先看看他/她的东西有没有形成风格，<strong>没风格、没有独立思考的作品一文不值</strong>。”</p><p>人生有两个重要时刻：<strong>一是意识到自己只是普通人，二是意识到自己的孩子只是普通人</strong>。评论区也读到两句有意思的话，大意是人生有两个重要时刻：<strong>一是发现自己不是普通人，二是发现自己是普通人</strong>。</p><p>坚持不是问题的核心，当然需要慢慢雕琢。思考频率，广度和深度。</p><p>我们学习到的新知识其实是一件件工具，不断用学到的新工具去重新思考以前的旧问题，往往新工具就能解决旧问题。我的一个建议不如把自己遇到的各种科研问题，不论多么不成熟都记下来在本子上，每过一阵子去翻看一遍学到的新知是否能够解决新问题。比如没学数据结构前，你总在想为啥我实现的机器学习模型这么慢，学了以后才知道搜索近邻可以用kd-tree，要是可并行的任务可以分解成小任务在多个core上运行。很<strong>多问题的答案其实非常朴实无华，但当你知道答案时，往往连问题都忘了，所以你总是没有好点子</strong>。因此要不断的记录，不断的回溯。随着你不断重复这个过程，思考的广度和深度都会上升。</p><p>人最终的问题就是想太多而做太少。绝大部分学术新星一开始的点子也是老板给的，或者一开始的工作也并非特别惊艳。但做的多了，质量总是会上升的。务实的说，有了尚可的点子就先做实验，有了尚可的实验结果就写论文，今天发不了CVPR就先发ICIP，迭代式上升才是符合普通人的路线。如果想要奔着搞大新闻的目标做科研，往往会卡很久很久很久…很久很久很久。但也不能总恰烂文章，必须逐步提高对自己的要求。</p><p>只有对自己的内容认可，才能做出让大家接受的内容。你最好能找到自己觉得有意思且重要的课题，而非是能发XXX会议的课题。只有这样你的内心才有动力，而非迷茫与功利。**而这一切的前提，也还是要有一定的思考和观察，毕竟好的点子不会从天上掉下来。而当你的工作质量上去了，得到关注与发表到好的期刊/会议只是水到渠成而已。</p><p>去做一些至少自己感兴趣且可以感到满意的工作</p><p>需要不断提高自己的思考能力和执行力。再务实一点说，<strong>从就业角度看做机器学习不一定比学软件开发性价比更高</strong>，毕竟后者岗位多需求大不易过气。所以在投身机器学习科研前，或者任何科研领域前，不如先想想自己的目的是啥，是为了找工作？发大财？当科学家？还是？没了解清楚前，不要给自己定一个虚无缥缈的的目标，也不要读了大牛的成功故事就感到自惭形秽。<strong>日子是我们自己的，你被感动、被激励只是说明人家文章写得好，和我们关系不大。你学学写作技巧后，最好赶快回到现实世界里来比较重要。不要给自己加戏，自怨自艾、感动、受鼓舞，都大可不必，务实就好。</strong></p><p>我的工作内容到底是啥？<strong>我告她就是修自行车</strong>。一个新点子就像是个骨架，初期修修补补先上路再说，叮叮哐哐咱慢慢修它，先能骑就行。你沿路捡个轮胎，随手淘个发动机（找到了新的工具），再一改装，或许就成摩托车了。搞科研的，别看见人家有摩托车就焦虑，就眼红，就着急，其实大家都是一路捡破烂过来的。</p><p>大家出门都是一双脚，你要啥自行车啊？</p><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><p>social networking</p><p><strong>社交其实是一种投资</strong>，<strong>本质上寻求一种交换</strong></p><p>职场社交的重点是<strong>真诚与简洁</strong>，不要绕太多弯，说人话说明白话。你跟比你资深/地位高的人接触时，对方很清楚你想的是什么，所以有内心铺垫来帮助你（即使并非义务）。所以你只要真诚的说明白自己的需求即可，不要绕太大的圈子，毕竟每个人都很忙。</p><h3 id="丰富阅历"><a href="#丰富阅历" class="headerlink" title="丰富阅历"></a>丰富阅历</h3><ol><li>知识积累</li><li>经验积累</li><li>素养积累</li></ol><ul><li>掌握好必备的数学基础，掌握好一些基础的计算机核心课程，<strong>至于编程方面的技巧，我倒觉得不是需要做到特别厉害。如果能力有限的话，可以放低对操作系统，计算机结构这种比较偏底层的课程</strong>，<strong>人生要学会抓大放小，不要苛求自己样样精通</strong>，胶水语言Python的知识还是可以有很大的帮助。学好英语，至少打下阅读和听力的基础。</li><li>尝试尽早接触科研，进实验室。进实验室有两个明显的好处，一是深入了解，二是是否适合。</li><li>要有自己的“坚持”和“品味”，多读不同领域的书，比如社科类、经济类、人文类。<strong>因为数据科学的起点是以数据为基础，终点提取见解提供反馈</strong>。放低身段，多和别人交流。其实这一点有一点牵强</li></ul><p>独立思考的能力，和去伪存真的勇气。生活中并不存在绝对的浪费，只是因为当下社会弥漫的焦虑感让我们希望任何投资都能马上变现。很多知识点互相交织，当你慢慢可以连点成线时，就可以对曾经困扰自己的问题有更深一层次的领悟，也就是渐进式学习。</p><p><strong>如果现阶段某个知识点卡住了你</strong>，<strong>无论如何都跨不过去。你不如先放下，或许过一阵子法门就会在别的地方出现，你甚至会有更上一层的理解。但在那之前，你要学会“跳过”，也要记得“回来”</strong></p><p>所以眼界大一点，你暂时连不起来的点可能只是时候未到，而非是浪费，每个人都是一座矿，你采的越猛，枯竭的也就越快。</p><p>学习本身就是对自身训练的过程，我们接受那么多知识，留下的应该是学习方法，而非一个个枯燥的公式。你该学习如何高效采矿，而非大力开采。</p><p>教育最大的意义不是让你记住细节，而是教会我们面对新知如何快速分解、消化，并从中创新。这些都不是靠苦工（拼死）能解决的，<strong>你终究要建立自己的框架，而非储存内容</strong>。</p><p>一个合理的学习态度在我看来是这样的：<strong>致力于训练自己可以快速内化新知识，遇到跨不过去槛先放下，但要记得回来</strong>。既不必啥都想学，贪多嚼不烂，也不必实用主义当先，要求任何付出都要马上变现。学习这事需要、也必须放松一点。<strong>你即使是座金矿，也怕矿难不是</strong>？拿我自己来说，我花了好几年做各种和学习、工作毫无关联的事情，甚至刚毕业时选了一份和知识背景完全垂直的工作并干了三年。我一个工科生，每天被要求西装革履写ppt，此处拜访客户卖咨询产品，这算是一种浪费吗？</p><p>某个时间突然失去了购买的欲望。仔细一算，上次认真去购物应该已经是16年的事情了。可能还是因为这样的快乐太廉价，连快乐都算不上了。毕竟生活中还有那么多求而不得的事情，做不完的工作，写不完的代码，发不出的论文，得不到升职。对于我们不曾拥有过的东西，幻想总是最美好的。当你有能力获得，甚至不需要任何代价就可以得到某种资源时，就会失去了获得它的乐趣。</p><p>喜欢好看的人或者事物，但往往美丽下隐藏着的除了平庸，还有风险。因此从成事的角度来看，长相普通，智力较高，有很强性格与执行力的人可能有更大的优势</p><h2 id="机器学习包含哪些学习思想？"><a href="#机器学习包含哪些学习思想？" class="headerlink" title="机器学习包含哪些学习思想？"></a>机器学习包含哪些学习思想？</h2><p>不仅仅是机器学习，大部分理工科的思想都可以从文史学科的角度去理解。正所谓大道至简，很多道理是共通的</p><ul><li>教条主义的危害，优化模型的评估问题。</li><li>少即是多，“ 如无必要，勿增实体”。</li><li>三个臭皮匠的智慧：若一件事情不能证实，也不能证伪，就要存疑。个体学习的准确性和多样性本身就存在冲突，一般的，准确性很高后，要增加多样性就需牺牲准确性。事实上，如何产生并结合好而不同个体学习器，恰是集合学习的研究核心</li><li>不可知论，频率学派相信参数是客观存在的，虽然未知，但不会改变。而贝叶斯学派相信参数不是固定的，我们需要发生过的事情来推测参数。</li><li>妥协、矛盾与独立思考，算法思想的精髓是无处不在的妥协永远保持怀疑,当机器学习模型很轻松就达到很好的效果时，比如百分之百的正确率，你要警惕。</li><li>最小预测单元，避免追求通过一个模型预测多个目标。</li><li>数据比模型更重要，但数据不是越多越好。</li></ul><p><strong>保持独立思考的能力，不要别人说什么/书上说什么/论文里写什么，你就相信什么</strong>。毕竟在机器学习的世界里，我们每个人都是“民科”。</p><p>很多程序员只写代码，不写文档，不写案例，不做宣传。那么很自然的，你写的东西也就没人用。因此写好文档与示例非常重要的。<strong>我建议至少花和写代码一样长的时间写文档</strong>，其中主要有三个构件：</p><ul><li><strong>代码中的docstring</strong>。建议使用numpydoc的风格：<a href="https://link.zhihu.com/?target=https://numpydoc.readthedocs.io/en/latest/format.html">numpydoc docstring guide - numpydoc v0.9.dev0 Manual</a></li><li><strong>GitHub上的ReadMe文档</strong>。例子可以看<a href="https://link.zhihu.com/?target=https://gist.github.com/dupuy/1855764">https://gist.github.com/dupuy/1855764</a></li><li><strong>Read the Docs的API文档</strong>。使用指南看这里：<a href="https://link.zhihu.com/?target=https://readthedocs.org/">Home | Read the Docs</a></li></ul><p>ReadMe文档最好是用rST语言来写，因为Read the Docs的语言也是rST，统一语言可以减少大量的开发成本。rST的编写指南可以参考：<a href="https://link.zhihu.com/?target=https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html">https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html</a></p><ul><li>人类是视觉动物，一个好的图文实例远远好于干巴巴的长篇大论.</li><li>人类是懒惰的。因此建议早早采用PyPI和conda来分发你的工具库，这样使用者就可以轻松使用pip和conda来安装啦。</li></ul><h2 id="Sustainable-Development（可持续开发）"><a href="#Sustainable-Development（可持续开发）" class="headerlink" title="Sustainable Development（可持续开发）"></a>Sustainable Development（可持续开发）</h2><p>写好几个模型容易，但保证工具库是可持续和可扩展是很难的。假设维护5个模型很简单，那么维护200个呢？所以在开发工具时就要考虑到这一点，有几个点非常重要：</p><ul><li>首先是必须有单元测试（unit test），每个对应的模型如无例外都应有对应的测试，保证代码的覆盖度。</li><li>其次是善用集成测试工具（continuous integration），它们可以在多个平台与Python版本下自动运行你的单元测试。</li><li>相似的，维护代码的可读性和测试覆盖度（code coverage）也很重要，对应的工具有：</li><li>最后要写好开发指南（contribution guide）与如何反馈问题，如何参与开发，为其他感兴趣的人提供一个模板，如何反馈问题，一个标准issue report该有哪些部分，后续开发计划是什么？新模型的添加标准（inclusion criteria）是什么。</li><li>在这个阶段的重点是如何把一个项目做成真正的开源项目，一个持久的项目。到达这个阶段以后，项目本身已经比个人更加重要，我们必须为了可持续性而牺牲掉一些便携性。</li><li>When Possible, Optimize! （优化）。所以当你的工具库有了一定的规模后，建议多考虑重构和效率提升。</li></ul><h2 id="One-more-thing-，know-why-to-do-it（保持初心）"><a href="#One-more-thing-，know-why-to-do-it（保持初心）" class="headerlink" title="One more thing ，know why to do it（保持初心）"></a>One more thing ，know why to do it（保持初心）</h2><p>写工具库的最终目的是为了锻炼自己，回馈社区。如果一开始的目的就是要出名，做个大新闻，有大概率只会铩羽而归。我开发过特定领域的通用库，同时也和很多优秀的开源贡献者有过探讨交流，包括scikit-learn的核心作者Alexandre Gramfort。Gramfort带给我的最大震撼不是工程与学术能力超强，而是超乎常人的认真—在一篇工具库论文中他给我们写了满满4页的评语，甚至运行了我们大部分案例与测试，这种精神让人肃然起敬。</p><p>写库不必太在意成功是否，自己努力过坚持过就好，只有真正的热情才能让我们一直持续维护与更新。只有几个用户却一直不放弃的开发者。这可能才是开源的真正意义吧。</p><h2 id="大学学习计算机专业真的很差吗？"><a href="#大学学习计算机专业真的很差吗？" class="headerlink" title="大学学习计算机专业真的很差吗？"></a>大学学习计算机专业真的很差吗？</h2><ul><li>希望能成为一个独特的人，而不是别人希望成为的那种人。</li><li>做艺术要先有自己的思考，才会有自己的风格</li></ul><p>毕业以后想做什么。我说不知道，大概去读博吧。他难得地严肃起来，说：“建议你先读一个硕士，完整的接受一个研究训练，或者去工作几年，明白自己喜欢的方向是什么。如果你依然很喜欢现在的研究方向，实验室欢迎你回来。</p><p>随着年纪逐渐增长，愈发感到人生是你自己的，不要被舆论裹挟着前进。无论今天别人告诉你计算机完美、生物“优秀”，还是金融有钱赚，你都不能照单全收。你要在可能的情况下收集尽量多的信息，要有自己的判断。拿最简单的经济学原理举例**，一个行业门槛很低但利润很高，就会涌入了大量竞争者，从而使得利润回归到应有的水平上去。所以，如果想要在一个领域做出成绩，就一定要尽早学会收集信息、独立思考，并综合做出合理判断。即使是一个高中生，在综合互联网信息、周围学长学姐以及亲戚长辈的建议后，你应该可以做出一个对自己负责的决定。即使选择不算完美，只要掌握了这样思维方式，你可以不断的修正自己的目标，从而实现自己的想法。</p><p>开始接触到更真实的世界了。真实的世界有很多个维度，不再是单纯的做题考试升学。这里你可以有各种各样的选择，甚至选择多到把你淹没**。你会听到各种各样的建议，来自老师、学长学姐、家里的长辈，每个人似乎都说的对，每种未来都那么熠熠生辉。在无数种“光明”的未来中，你会怎么选择自己的路呢？</p><p>明白每个阶段自己的能力边界在哪里，勇敢放弃边界外的机会，并在边界中最大化自己的价值。迈入大学最大的冲击就是周围的选项与诱惑突然以爆炸的形式出现在你眼前，很多人要不会迷失于诱惑，或者迷失于如何选择。全都要[哈哈哈]</p><p>世间风景万千，唯有错过才会取得。</p><p>做一个算法工程师，代码能力，整合能力，学术基础，沟通能力每个都很重要，但都不是绝对的条件。谋而后动，多思考，少抱怨，方法总比困难多。</p><p>开放一个别人可以与我互动的渠道，人总要有一定的出现频率，才能形成圈子。</p><p>教育的本质，应该是让每个受教育者能过得更好一些。</p><p>参考文档（API Reference）对于使用API的重要性，而大部分参考文档其实是自动生成的。而我的第一份实习主要就是做一件事，修复自动文档生成中的error和warning。举个简单的例子，下面是一个简单的求两数之和的函数，并加上了字符串介绍函数的功能以及相关变量和返回值。API参考文档的意义是什么？</p><p>代码覆盖的重要性就是提高我们对于新代码的信息，让我们知道这些新的代码是有保证和重复测试的。</p><p>对着代码看了整整一上午都没看出问题，直到后来原来负责这个模块的工程师看过才发现了我们的代码少处理了一个特例（corner case），而单元测试也没有写逆向测试，所以无法通过软件的编译。<strong>那个时候我才知道，测试不仅要看是否按照预期运行，还要检测失败后应该是什么情况，并让它失败</strong>。</p><p>后来我就彻底告别了软件开发行业，也基本不用C++了，学了两天Python就开始一招走遍天下。我以为曾经给过我教训的这些软件工程知识估计用不上了，而编程经验对于我最大的帮助就是可以短时间上手Python。</p><p>去年在机缘巧合下开始参与了一些开源软件开发，也开发了一些自己的算法工具库。当时完全摸不着头脑，但从网上一搜如何做开源工具库，发现都是我很熟悉的概念：</p><ul><li>写好测试，并使用自动测试模块，关注代码覆盖率</li><li>写好参考文档，使用字符串和文档生成工具</li><li>注意版本控制，做好regression testing</li></ul><p>作为一个完全没做过开源的工具库的人，我只花了一周就完成了我的第一个算法工具包，文档、测试、代码覆盖一应俱全，也获得了一些小同行的关注。<strong>如果我不曾学习软件工程，那我肯定无法快速开发出可用的工具库，可能空有好点子却无法实现</strong>。</p><p>编程它就是个工具，它可以帮助你很快实现各种你看到的新点子<strong>。从这个角度来看，</strong>不管你是机器学习、优化以及其他方向，多学点编程肯定不吃亏。即使你最后没能做机器学习，这编程能力是你的谁也拿不走，还有广阔的就业市场。**</p><p>编程能力对于机器学习<strong>即使不是雪中送炭，也一定可以锦上添花</strong>。有大概率我们最终当不了科学家，而学好编程做个工程师是很好的替代选择。</p><p>现实一点看，少跟数学死磕，多花时间动手实现，拥有良好的编程能力，可以是就业的一道保障。找不到机器学习岗位，还可以去写JAVA去做手游嘛。</p><p>你可以选择跳槽，但工作也会筛选你。动机很重要，如果你的目标是赚个“快钱”，可能很快工作就会把你逼离这个岗位<strong>。</strong>因为初级的工作不仅没有高薪，还有很大的挫败感<strong>。你可能会觉得什么都不懂，什么都不做好，然后后悔自己要转行。</strong>而转行中最难得的，就是能感觉到“有意思”**。这不仅仅是鸡汤，你对一个领域的热情可以反映在写论文、玩博客、出书，也可以体现在主动揽活，业余时间自学。热情是骗不了人的。</p><p>我的天哪，做着自己喜欢的事情，还有钱拿。还有比这更爽的事情吗？</p><p>每个人都有转行的权利。但建议转的步子小一点，别一口吃成个胖子。这不仅仅是给自己一个余地，也是对公司负责。胡言乱语说了一堆，诸君就当个段子就好。</p><p>调整心理期待，明白网络是找乐子的地方。</p><p>笔记应该是“索引”，而不是摘要。索引是你自己的，摘要是作者的。作为一个普通人，想要记住所有的paper内容和精髓是不现实的。</p><h2 id="深度学习、机器学习的论坛"><a href="#深度学习、机器学习的论坛" class="headerlink" title="深度学习、机器学习的论坛"></a>深度学习、机器学习的论坛</h2><ul><li>Reddit的ml板块（<a href="https://link.zhihu.com/?target=https://www.reddit.com/r/MachineLearning/">Machine Learning • r/MachineLearning</a>），资讯为主</li><li>Reddit的ai板块（<a href="https://link.zhihu.com/?target=https://www.reddit.com/r/artificial/">Artificial Intelligence • r/artificial</a>）</li><li>Quora机器学习（<a href="https://link.zhihu.com/?target=https://www.quora.com/topic/Machine-Learning">Machine Learning</a>）</li><li>stack exchange统计版（<a href="https://link.zhihu.com/?target=https://stats.stackexchange.com/">Cross Validated</a> ），更多是统计相关</li><li>stack exchange数据科学版（<a href="https://link.zhihu.com/?target=https://datascience.stackexchange.com/">Data Science Stack Exchange</a>），帖子不多</li><li>stack overflow（偏向编程）。如果需要特别关注深度学习，就得加上标签搜索。</li><li>Reddit和Quora更偏向资讯交互，解决具体技术问题的讨论较少，偏方法论。后三个偏向解决具体问题，很多非常具体。Quora和stackexchange上不乏有大佬出没。</li></ul><p>躺平就完事了</p><p>我们大部分人这辈子就是混口饭吃，能够一步步计划并实施的人真的太少了，大部分时候就是头脑一热。这种冲动，尤其是是年轻时候的冲动是非常值得尊重的。科技迭代是一轮一轮的。如果你今天以较低的成本赶上了这一轮热潮，也一定要赶快补足深度，不然下轮死在沙滩上的就是你。</p><h2 id="数学作用"><a href="#数学作用" class="headerlink" title="数学作用"></a>数学作用</h2><p>规范表达，具体问题抽象为数学问题后，往往信息得到了压缩，仅仅是最重要的部分得以保留，这是非常适合信息交换与流通的。</p><ul><li>数据储存与安全</li><li>明白的数据的价值</li><li>Break the loop（打破循环）</li></ul><p>没有学历，没有技能，没有人脉，也没有财产，最终沦为底层。需要打破循环，但往往需要借助外力,当你感到困扰，需要突破时，不妨多多向外求助，比自我纠结效果会好很多。</p><h2 id="成功的开源项目"><a href="#成功的开源项目" class="headerlink" title="成功的开源项目"></a>成功的开源项目</h2><ul><li>核心代码群，且必须有合适的docstring和注释，用于生成文档。</li><li>配套的单元测试，以及自动测试（比如travis ci）和代码覆盖率（code coverage）</li><li>配套的文档以及例子，比如托管在readthedocs上，以及在binder上做一个jupyter notebooks。</li><li>封装并上传到pypi和conda上，方便大家下载更新。</li><li>写一个吸引人的README，使读者有兴趣使用你的工具。最好在Stack Overflow等网站上宣传。</li></ul><p>上面每一点都有无数的坑需要趟，绝不是想的那么容易。大部分所谓的开源工具连个介绍文档都没有，怎么可能吸引别人来用呢？更别提被人star了。<strong>很多人仅仅是做了第一点，只做了核心模型，但其他部分全部都是缺失的，那么这种“所谓的硬核”工具库其实真不如资源收集贴更有实际意义</strong>。</p><p>至少应该等同于开发时间精力在写文档和宣传上，这样才算是个合格开源工具。从这个角度看，资源repo获得更多star也不奇怪，因为它的阅读门槛低，内容是可自解释的（self-explanatory &amp; self-contained），所以读者没有阅读障碍。</p><p>其实退一步来看，开源项目的初衷是分享，被别人star/fork/watch是一种肯定，这没错。但也不必凡事都论成就大小，那就有点舍本逐末的意思了。</p><h2 id="找实习"><a href="#找实习" class="headerlink" title="找实习"></a>找实习</h2><ul><li>根据往届情况进行精准定位</li><li>调整心理预期，放宽搜索域</li><li>找到你的“闪光点</li><li>先进实验室，再去实习</li><li>大部分简历都活不过人事那一关，你有再强的技术也走不到面试官面前</li><li>埋首故纸堆不是错，但你要相信条条大路通罗马。</li><li>了解算法，但不死抠算法</li></ul><p>越往前走，我就越发现“磨练技术”和“培养软实力”并不矛盾，一个好的工程师或者科学家也需要“讲故事”和“混圈子”。说了这么多，只是想在一贯的技术分享以外，提供一些容易被我们这些书呆子忽略的事情。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做咸鱼没什么不好的，不过做条有梦想的咸鱼也不赖。&lt;/p&gt;</summary>
    
    
    
    <category term="People that affect me" scheme="http://muxueweiyu.github.io/wiki/categories/People-that-affect-me/"/>
    
    
    <category term="affect" scheme="http://muxueweiyu.github.io/wiki/tags/affect/"/>
    
    <category term="people" scheme="http://muxueweiyu.github.io/wiki/tags/people/"/>
    
  </entry>
  
  <entry>
    <title>推荐</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/%E6%8E%A8%E8%8D%90/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/%E6%8E%A8%E8%8D%90/</id>
    <published>2018-10-18T05:24:49.000Z</published>
    <updated>2021-03-21T06:47:17.034Z</updated>
    
    <content type="html"><![CDATA[<p>许多事情并不是立竿见影的影响，而是不断经历失败后再次看到之后才发觉原来如此。</p><span id="more"></span><h2 id="Why-Functional-Programming-Matters-阅读笔记"><a href="#Why-Functional-Programming-Matters-阅读笔记" class="headerlink" title="Why Functional Programming Matters 阅读笔记"></a>Why Functional Programming Matters 阅读笔记</h2><blockquote><p>本文是 Why Functional Programming Matters（为什么函数式编程很重要）的阅读笔记，用相对通俗的语言解读了这篇论文，并对我觉得重要的一些点做了一些解释。</p></blockquote><p>为什么函数式编程很重要?随着软件变得越来越复杂，良好地组织软件也越来越重要。一个组织良好的软件更容易编写调试，这种软件提供了一组可以复用的模块（module），这也降低了未来编写代码的代价。本文将说明，函数式编程语言的特色，尤其是高阶函数和惰性求值（high-order function and lazy evaluation），将会对模块化非常有利。<strong>因为模块化是软件开发成功的关键，所以函数式编程会在软件开发过程中具备很大的优势。</strong></p><p>模块化的过程是将问题分解成子问题，求解子问题，再将子问题的解结合（glue）起来的过程。怎么分解直接依赖于编程语言提供了怎样的结合方法。所以要增强模块化能力，需要提供新的结合方法。</p><p>模块化对编程很重要，模块化（modularity）不仅仅是模块（module）。</p><h2 id="Teach-Yourself-Programming-in-Ten-Years"><a href="#Teach-Yourself-Programming-in-Ten-Years" class="headerlink" title="Teach Yourself Programming in Ten Years"></a>Teach Yourself Programming in Ten Years</h2><p>为什么每个人都这么着急？走进任何书店，您将看到如何<em>在24小时内自学Java，</em>以及无穷无尽的变体，可以在几天或几小时内教授C，SQL，Ruby，算法等。</p><p>结论是要么人们急于学习编程，要么编程比其他任何东西都更容易学习。Felleisen <em>等。</em> 在他们的书《*<a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html">如何设计程序</a><em>》中对这种趋势表示</em><a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html">赞同</a><em>，当他们说“错误的编程很容易。</em>白痴<em>可以在</em>21天内<em>学习它，即使他们是</em>傻瓜*。” <a href="http://abstrusegoose.com/249">Abtruse Goose漫画</a>也受到了欢迎。</p><ul><li><p>自学：</p><p>  在24小时内，您将没有时间编写几个重要的程序，并从它们的成功和失败中学习。您将没有时间与经验丰富的程序员一起工作，也不了解在C ++环境中生活的感觉。简而言之，您将没有时间学习很多东西。因此，这本书只能说是肤浅的熟悉，而不是深刻的理解。正如亚历山大·波普（Alexander Pope）所说，学一点东西是一件危险的事情。</p></li><li><p>C++：<br>  在24小时内，您可能可以学习C ++的某些语法（如果您已经知道另一种语言），但是您对如何使用该语言的了解却不多。简而言之，如果您是一名Basic程序员，则可以学习使用C ++语法以Basic风格编写程序，但是您将无法了解C ++的优点（或缺点）。那有什么意义呢？</p></li></ul><p>艾伦·珀利斯（Alan Perlis）曾经说过：“一种不影响您对编程的思考方式的语言，是不值得了解的”。一个可能的观点是，您必须学习一小部分C ++（或更可能是JavaScript或Processing之类的东西），因为您需要与现有工具交互以完成特定任务。但是，那时您不会学习编程。您正在学习完成该任务。</p><h2 id="十年自学编程"><a href="#十年自学编程" class="headerlink" title="十年自学编程"></a>十年自学编程</h2><p>在下棋，音乐等众多领域中发展专业知识大约需要十年的时间。写作，电报操作，绘画，钢琴演奏，游泳，网球以及神经心理学和拓扑学研究。关键是<em>商议</em> 练习：不仅要一遍又一遍地做，还要挑战一项超越您当前能力的任务来挑战自己，尝试一下，分析执行前后的表现，并纠正任何错误。然后重复。再重复一次。似乎没有真正的捷径：即使是4岁的音乐天才莫扎特，也花了13年的时间才开始创作世界一流的音乐。在另一种类型中，甲壳虫乐队似乎爆出一连串的＃1热门歌曲，并在1964年的埃德·沙利文（Ed Sullivan）演出中露面。但是自1957年以来，他们一直在利物浦和汉堡的小型俱乐部里打球，尽管他们颇具吸引力在早期，他们的第一个重大成功就是<em>Sgt。Peppers</em>于1967年发行。</p><p><a href="http://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017922">马尔科姆·格拉德威尔</a>尽管他专注于10,000小时（而不是10年），但他已经推广了这个想法。亨利·卡蒂埃·布雷森（Henri Cartier-Bresson，1908-2004年）的另一个标准是：“您的前10,000张照片是最糟糕的。” （他没想到数码相机会在一个星期内达到这个目标。）真正的专业知识可能需要一辈子：塞缪尔·约翰逊（Samuel Johnson（1709-1784））说：“任何部门的出色表现，只有靠一生；不应以较低的价格购买。” 乔uc（1340-1400）抱怨说：“莱夫（lyf）太短了，手工艺品那么久了。” 希波克拉底（约公元前400年）以“ ars longa，vita brevis”的摘录而闻名，它是“ Ars longa，vita brevis，occasio praeceps，experimentum perculosum，iudicium difficile”较长引语的一部分，在英语中译为“生命”。是短， 当然，没有一个数字可以作为最终答案：假设所有技能（例如编程，下棋，下棋和玩音乐）可能都需要完全相同的时间来掌握，这似乎是不合理的，也不会所有人都花费完全相同的时间。正如K.Anders Ericsson教授所说：“在大多数领域，即使是最有才华的个人也需要多少时间才能达到最高水平。令人难以置信的是，10,000小时的小时数使您感觉我们正在谈论多年每周10至20个小时，有些人会说这些是天赋最才华的人，仍然需要达到最高水平。”</p><h2 id="我想成为一名程序员"><a href="#我想成为一名程序员" class="headerlink" title="我想成为一名程序员"></a>我想成为一名程序员</h2><ul><li>获取感兴趣的，因为他很有趣，确保保持足够的乐趣，以便令我愿意投入十年/10,000小时的时间。</li><li>程序学习的最好方法就是边做边学。从技术上讲，“在一定范围内，个人的最高绩效不会根据扩展的经验而自动获得，但是，即使是经验丰富的个人，也可以通过有意改进来提高绩效水平。 ”</li><li>最有效的学习需要对特定个体具有适当难度级别的明确定义的任务，信息反馈以及重复和纠正错误的机会。</li><li>与程序员交流，阅读其他程序，这比任何书籍或培训课程都重要。</li><li>如果需要，可以在大学学习期间获得一些实习，无论如何，仅靠书籍学习是不够的。“计算机科学教育不能使任何人成为专业程序员，就像学习画笔和颜料怎么可能使某人成为专家画家一样。”</li><li>缺乏创意吗？与其他程序一起从事项目。在某些项目中成为最好的程序员；在其他人身上最糟糕。当您处于最佳状态时，就可以测试自己领导项目的能力，并用自己的远见激发他人。在最坏的情况下，您将学习大师的所作所为，并了解他们不喜欢做的事情（因为他们让您为他们做）。</li><li>了解别人编写的程序。看看当原始程序员不在时需要理解和修复它的过程。考虑如何设计您的程序，使那些在您之后维护它们的人更轻松。</li><li>学习至少六种编程语言，包括一种强调类抽象的语言（例如Java或C ++），一种强调功能抽象的语言（例如Lisp或ML或Haskell），一种支持语法抽象的语言（例如Lisp），一种支持声明性规范的语言（例如Prolog或C ++模板）。 ，并且强调并行性（例如Clojure或Go）。</li><li>计算机科学，了解计算机执行一条指令，从内存中获取一个单词（有或没有缓存未命中），从磁盘读取连续的单词以及在磁盘上寻找新位置需要多长时间。</li><li>语言的标准化，良好的意识，尽快开始语言标准化工作。考虑到所有这些，仅通过学习书籍就能取得多大的成绩值得怀疑。在我的第一个孩子出生之前，我阅读了所有“ <em>如何做”</em>书，仍然感到自己是一个笨手笨手的新手。30个月后，当我的第二个孩子到期时，我是否又回到书店复习了？否。相反，我依靠自己的个人经验，事实证明，与专家撰写的成千上万页相比，这对我来说更加有用和令人放心。</li></ul><p>弗雷德·布鲁克斯（Fred Brooks）在他的论文《*<a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">无银子弹》中</a>* 确定了一个由三部分组成的计划，以寻找优秀的软件设计师：</p><ul><li>尽早系统地确定顶级设计师。</li><li>指派职业指导者负责潜在客户的发展，并仔细保存职业档案。</li><li>为成长中的设计师提供互动和相互刺激的机会。</li></ul><p>假设某些人已经具备成为优秀设计师所需的素质；工作是适当地哄骗他们。更简洁地说：“每个人都可以雕刻：米开朗基罗必须被教导如何不做。伟大的程序员也是如此。” 佩利斯（Perlis）说，伟人的内在素质超越了他们的训练。但是质量从何而来？是天生的吗？还是他们通过勤奋发展？正如奥古斯特·古斯托（<em>Ratatouille</em>的虚构厨师 ）所说，“任何人都可以做饭，但只有无所畏惧的人才能做得好。” 我将其更多地视为愿意将一生的大部分时间投入到思考实践中。但也许 <em>无所畏惧</em>是一种概括的方式。或者，正如古斯托（Gusteau）的批评家安东·埃戈（Anton Ego）所说：“并非每个人都能成为一名伟大的艺术家，但是伟大的艺术家可以来自任何地方。”</p><p>因此，继续购买那本Java / Ruby / Javascript / PHP书；您可能会从中受益。但是您不会在24小时或21天内改变自己的生活，也不会改变自己真正的整体专业知识。如何努力在24个月内不断改进？好吧，现在您开始有所建树…</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>本杰明·布鲁姆（ed）*<a href="http://www.amazon.com/exec/obidos/ASIN/034531509X">《年轻人的发展才能》</a>*，巴兰廷，1985年。</li><li>布鲁克斯，弗雷德，《*<a href="http://citeseer.nj.nec.com/context/7718/0">无银子弹》</a>*，IEEE计算机，第1卷。20号 1987年第4期，第4页。10-19。</li><li>Bryan，WL＆Harter，N.“关于电报语言的研究：习性等级的习得。Psychology <em>Review</em>，1899，8，345-375</li><li>海斯（John Hayes），《*<a href="http://www.amazon.com/exec/obidos/ASIN/0805803092">完成问题解决者》（</a>* Lawrence Erlbaum），1989年。</li><li>Lave，Jean，《<a href="http://www.amazon.com/exec/obidos/ASIN/0521357349">实践中的认知：日常生活中的思维，数学和文化》</a>，剑桥大学出版社，1988年。</li></ul><h2 id="附录：语言选择"><a href="#附录：语言选择" class="headerlink" title="附录：语言选择"></a>附录：语言选择</h2><p>先学习哪种编程语言。是没有答案，但可以考虑以下几点：</p><ul><li>使用你的朋友*。当被问及“我应该使用哪种操作系统，Windows，Unix或Mac？”时，我的回答通常是：“使用您的朋友使用的任何软件”。从朋友那里学习所获得的优势将抵消操作系统之间或编程语言之间的任何内在差异。还请考虑您的未来朋友：如果继续，您将成为程序员社区的一部分。您选择的语言是一个正在成长的大型社区还是一个濒临灭绝的社区？是否有书籍，网站和在线论坛可提供答案？您喜欢那些论坛中的人吗？</li><li>保持简单*。诸如C ++和Java之类的编程语言是由经验丰富的程序员组成的大型团队设计的，这些团队关心其代码的运行时效率。结果，这些语言具有针对这些情况设计的复杂部分。您担心要学习编程。您不需要那种麻烦。您需要一种被设计为易于由单个新程序员学习和记住的语言。</li><li>玩。宁愿学习弹钢琴的方式：通常的互动方式，即敲击琴键后便会听到每个音符，或者是“批处理”模式，即在完成整首歌曲后才听到音符？显然，交互式模式使钢琴和编程学习变得更加容易。坚持使用交互式模式的语言并使用它。</li></ul><p>给定这些条件，我对第一种编程语言的建议是**<a href="http://python.org/">Python</a>**或 **<a href="http://www.schemers.org/">Scheme</a>**。另一个选择是Javascript，不是因为它是为初学者精心设计的，而是因为有许多在线教程供您使用，例如 <a href="https://www.khanacademy.org/computing/cs/programming">Khan Academy的教程</a>。但是您的情况可能会有所不同，还有其他不错的选择。如果您的年龄是个位数，则您可能更喜欢 <a href="http://alice.org/">Alice</a>或<a href="http://www.squeak.org/">Squeak</a> 或<a href="https://blockly-demo.appspot.com/static/apps/index.html">Blockly</a>（年龄较大的学习者可能会喜欢）。重要的是您选择并开始。</p><h2 id="书籍和其他资源"><a href="#书籍和其他资源" class="headerlink" title="书籍和其他资源"></a>书籍和其他资源</h2><p> <a href="http://www.amazon.com/gp/product/0262011530">计算机程序的结构和解释（Abelson和Sussman）</a>可能是计算机科学的最好入门，它确实教授编程作为理解计算机科学的一种方式。您可以在本书中<a href="http://www.swiss.ai.mit.edu/classes/6.001/abelson-sussman-lectures/">在线观看讲座视频</a>，以及<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">在线全文</a>。这本书具有挑战性，将淘汰一些可能通过另一种方法成功的人。</p><p> <a href="http://www.amazon.com/gp/product/0262062186">如何设计程序（Felleisen <em>等人</em>）</a>是有关如何以优雅和实用的方式实际设计程序的最佳书籍之一。</p><p>Python：<a href="http://www.amazon.com/gp/product/1887902996">Python编程：CS</a>入门<a href="http://www.amazon.com/gp/product/1887902996">（Zelle）</a>是使用Python的不错的入门。</p><p>Python：<a href="http://python.org/">Python.org</a> 上提供了一些在线<a href="http://wiki.python.org/moin/BeginnersGuide">教程</a>。</p><p><a href="http://www.amazon.com/gp/product/0262220695">计算机编程的概念，技术和模型（Van Roy和Haridi）</a> 被某些人视为Abelson＆Sussman的现代继任者。这是一门编程的大创意，涵盖了比Abelson＆Sussman更大的范围，同时也许更易于阅读和遵循。它使用一种广泛使用的语言Oz，但它是学习其他语言的基础。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;许多事情并不是立竿见影的影响，而是不断经历失败后再次看到之后才发觉原来如此。&lt;/p&gt;</summary>
    
    
    
    <category term="People that affect me" scheme="http://muxueweiyu.github.io/wiki/categories/People-that-affect-me/"/>
    
    
    <category term="affect" scheme="http://muxueweiyu.github.io/wiki/tags/affect/"/>
    
    <category term="people" scheme="http://muxueweiyu.github.io/wiki/tags/people/"/>
    
  </entry>
  
  <entry>
    <title>硅胖语录集合</title>
    <link href="http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/%E7%A1%85%E8%83%96/"/>
    <id>http://muxueweiyu.github.io/wiki/wiki/People%20that%20affect%20me/%E7%A1%85%E8%83%96/</id>
    <published>2018-09-01T05:23:55.000Z</published>
    <updated>2021-03-21T06:46:53.322Z</updated>
    
    <content type="html"><![CDATA[<p>磨练心智，开阔视野，了解彼岸的信息。</p><span id="more"></span><h2 id="了解论坛"><a href="#了解论坛" class="headerlink" title="了解论坛"></a>了解论坛</h2><blockquote><p>最早期获取未知信息的来源，知道了一亩三分论坛的，快速高效，隐私保护是个难题。收费变现，让大量人员流失。毕竟社交平台的程序和服务器谁都会弄，其真正价值还在于贡献者和内容——Google所以伟大，不是因为Google只有搜索引擎，还是因为它的搜索引擎可以index世界上所有的网页，那些网页才是真正的贡献者。</p></blockquote><ul><li>真正的贡献者其实是发面经和帖子的人。</li><li>严格来讲，发面经是违反NDA的。</li><li>从商业角度，这就是个建设“平台”还是“产品”的问题</li><li>英文平台的崛起。可以参考Levelsfyi；公司小道消息和八卦，可以看Blind</li></ul><p>大趋势上，论坛逐渐被公众号和知乎以及各种知识分享的App所取代。长远来讲，留学、移民话题也可能如此，被新方式取代。</p><p>用硅谷商业模式碾压“躺在技术壁垒中不思进取只想着割韭菜的臃肿缓慢官僚保守的传统车厂”，这才是电动汽车的根本优势所在。</p><h2 id="专业and职业"><a href="#专业and职业" class="headerlink" title="专业and职业"></a>专业and职业</h2><p>供需始终在动态变化，每个人的路都是要自己孤独去走的。但我一直认为，如今改行学计算机，依然是正道之一，无论国内国外。只不过，暂时可能会面临经济危机、疫情危机、人数过多等问题，可能要有几年的低谷了。</p><p>经济危机往往是谷底，也就是上升的开始。而且，这世界上的事情被说得很复杂，有时候却简单得残酷：没有别的选择，尤其是某些人。</p><p>出国考个GRE,学CS都是顺理成章的事情，没什么可纠结的。</p><p>那么多培训机构和专业人员，全职教学尚且困难，讲的东西很多也只是皮毛，又何德何能，靠业余时间一个人筑起一座城市.</p><p>很多东西，“懂”和能把人“教懂”是两个概念，“教懂”是需要大量而长期的实践的，是我暂时所不具备的。如果能够面对面说话、有白板，还更好一些，通过文字，表达力就更差一层了。</p><p>现实也是个问题。中文互联网的现实状况，使得原创并没有太多的直接利益，所以缺乏内在驱动力。</p><p>大量垃圾信息流的出现也就是在那段野蛮时期。由针对问题和现实，到针对个人和立场。太快了。</p><h2 id="自我变化"><a href="#自我变化" class="headerlink" title="自我变化"></a>自我变化</h2><p>曾经的文学梦，现在也做到了每天码字。可以说某种意义上已经开始了。</p><p>这次疫情，被迫尝试了不同的生活和工作方式，也有时间思考，恍如隔世，仿佛昨日还是意气风发。</p><p>发现自己总是有很强的心理暗示和心理依赖效应。就像我总暗示自己在家上班效率不高，但事实上是错的，这不过是一种心理上的舒适区而已。真被迫在家上班，我也可以工作得非常好。</p><p>对社交网络的依赖感越来越轻了，</p><h2 id="码农工作本身"><a href="#码农工作本身" class="headerlink" title="码农工作本身"></a>码农工作本身</h2><p>从最初拥有自己的个人计算机开始，就有一种感觉，一定要进入这个行业。不管是为了更好的技术，创作的成就感。一切的前提就是对于一切未知的求知欲“这玩意到底怎么回事，我得搞清楚。我不是加班，只是好奇而已。”</p><p>对整个行业的态度，我当然没有改变多少：计算机过去是、现在是、未来也一直是会解决实际问题的创新行业，因此给勤劳好学能吃苦的人以更多的机会，能够改变自己阶层和环境的机会。我完全支持很多人拿计算机作为跳板和谋生手段的做法，至于能否喜爱不必奢求。</p><p>非常有趣，不会觉得乏味和单调。日复一日，年复一年。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;磨练心智，开阔视野，了解彼岸的信息。&lt;/p&gt;</summary>
    
    
    
    <category term="People that affect me" scheme="http://muxueweiyu.github.io/wiki/categories/People-that-affect-me/"/>
    
    
    <category term="affect" scheme="http://muxueweiyu.github.io/wiki/tags/affect/"/>
    
    <category term="people" scheme="http://muxueweiyu.github.io/wiki/tags/people/"/>
    
  </entry>
  
</feed>
